
////////////////////////////////////////////////////////////////////////////////
//
//  IIIIIII SSSSSS
//    II    SS                          InstallShield (R)
//    II    SSSSSS      (c) 1996-1998, InstallShield Software Corporation
//    II        SS      (c) 1990-1996, InstallShield Corporation
//  IIIIIII SSSSSS                     All Rights Reserved.
//
//
//  This code is generated as a starting setup template.  You should
//  modify it to provide all necessary steps for your setup.
//
//
//    File Name:  Setup.rul
//
//  Description:  InstallShield script
//
//     Comments:  This template script performs a basic setup. With minor
//                modifications, this template can be adapted to create
//                new, customized setups.
//
////////////////////////////////////////////////////////////////////////////////


// Include header files

    #include "sdlang.h"
    #include "sddialog.h"
    #include "isunerasew.h"
    #include "iswipeinfo.h"
    #include "setup.h"

////////////////////// string defines ////////////////////////////

    #define UNINST_LOGFILE_NAME      "Uninst.isu"

//////////////////// installation declarations ///////////////////

// ----- DLL function prototypes -----


    // your DLL function prototypes
    prototype NUINST.InstallNPDriver(BOOL);

// ---- script function prototypes -----

    // generated by the Project Wizard
    prototype ShowDialogs();
    prototype MoveFileData();
    prototype HandleMoveDataError( NUMBER );
    prototype ParseCmdLine();
    prototype ProcessBeforeDataMove();
    prototype ProcessAfterDataMove();
    prototype SetupRegistry();
    prototype SetupFolders();
    prototype CleanUpInstall();
    prototype SetupInstall();
    prototype InstallNTServices();
    prototype InitGlobal();
    prototype SetupScreen();
    prototype CheckRequirements();
    prototype DialogShowSdWelcome();
    prototype DialogShowSdLicense();
    prototype DialogShowSdAskDestPath();
    prototype DialogShowSdStartCopy();
    prototype DialogShowSdFinishReboot();

    // your script function prototypes


    // ----- global variables ------

    // generated by the Project Wizard
    BOOL        g_bIsWindowsNT4, g_bIsWindowsNT351, g_bIsWindows98, g_bIsWindows95;
    BOOL        g_bIsShellExplorer, bInstallAborted, g_bIs32BitSetup;
    BOOL        g_bEnableWipeInfo, g_bEnableNP, g_bRebootInstall;
    STRING      g_szTarget;
    STRING      svName, svCompany, svSerial;
    STRING      svDefGroup;
    STRING      szAppPath;
    STRING      svSetupType;
    STRING      g_szSymantec, g_szSymCommon, szCustomDll, g_szTargetPath;
    LIST        listStartCopy;

    // your global variables


///////////////////////////////////////////////////////////////////////////////
//
//   MAIN PROGRAM
//
//      The setup begins here by hiding the visible setup
//      window.  This is done to allow all the titles, images, etc. to
//      be established before showing the main window.  The setup is
//      then performed in a series of calls to script defined functions,
//      with error checking at each step.
//
///////////////////////////////////////////////////////////////////////////////
program
    Disable( BACKGROUND );

    szCustomDll = SUPPORTDIR ^ CUSTOM_DLLNAME;

    //
    // Must have -G or we won't run (unless in silent mode).
    //
    if ((StrFind(CMDLINE, "-G") < 0) && (MODE != SILENTMODE)) then abort; endif;

    CheckRequirements();

    InitGlobal();

    ParseCmdLine();

    SetupInstall();

    SetupScreen();

    if (ShowDialogs()<0) goto end_install;

    if (ProcessBeforeDataMove()<0) goto end_install;

    if (MoveFileData()<0) goto end_install;

    if (ProcessAfterDataMove()<0) goto end_install;

    if (SetupRegistry()<0) goto end_install;

    if (SetupFolders()<0) goto end_install;


    end_install:

    CleanUpInstall();

    // If an unrecoverable error occurred, clean up
    // the partial installation. Otherwise, exit normally.

    if (bInstallAborted) then
        abort;
    endif;

endprogram

///////////////////////////////////////////////////////////////////////////////
//
// Function:  ShowDialogs
//
//  Purpose:  This function manages the display and navigation of
//            the standard dialogs that exist in a setup.
//
///////////////////////////////////////////////////////////////////////////////
function ShowDialogs()
    NUMBER  nResult;

begin

    Dlg_Start:
    // beginning of dialogs label

    Dlg_SdWelcome:
    nResult = DialogShowSdWelcome();
    if (nResult = BACK) goto Dlg_Start;

    Dlg_SdLicense:
    nResult = DialogShowSdLicense();
    if (nResult = BACK) goto Dlg_SdWelcome;

    Dlg_SdAskDestPath:
    nResult = DialogShowSdAskDestPath();
    if (nResult = BACK) goto Dlg_SdLicense;

    Dlg_SdStartCopy:
    nResult = DialogShowSdStartCopy();
    if (nResult = BACK) goto Dlg_SdAskDestPath;

    return 0;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: InitGlobal
//
//  Purpose: This function makes the registry entries for this setup.
//
///////////////////////////////////////////////////////////////////////////////
function InitGlobal()
    NUMBER nResult, nType, nSize;
    STRING szKey, svResult;
begin

    g_bEnableWipeInfo = TRUE;
    g_bEnableNP = TRUE;
    g_bRebootInstall = TRUE;
    g_szTargetPath = "";

    // Find shared components directory
    szKey = "\\Software\\Symantec\\SharedUsage";

    if ( RegDBGetKeyValueEx( szKey, "Location1", nType, svResult, nSize ) = 0 ) then
        LongPathFromShortPath( svResult );
        g_szSymantec = svResult;
    else
        szKey = "\\Software\\Microsoft\\Windows\\CurrentVersion";

        if ( RegDBGetKeyValueEx( szKey, "ProgramFilesDir", nType, svResult,
                                 nSize ) = 0 ) then
            g_szSymantec = svResult ^ "Symantec";
        endif;
    endif;

    // Initialize Symantec Common directory
    g_szSymCommon = COMMONFILES ^ "Symantec Shared";

    return nResult;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: ProcessBeforeDataMove
//
//  Purpose: This function performs any necessary operations prior to the
//           actual file transfer.
//
///////////////////////////////////////////////////////////////////////////////
function ProcessBeforeDataMove()
    STRING svLogFile, szUninstDll, szKey, szValue;
    NUMBER nResult, nvType, nvSize;

begin

  // Create app information, uninstallation, and App Paths registry keys.

    InstallationInfo( @COMPANY_NAME, @PRODUCT_NAME, @PRODUCT_VERSION, @PRODUCT_KEY );

    svLogFile = UNINST_LOGFILE_NAME;

    nResult = DeinstallStart( g_szTarget, svLogFile, @UNINST_KEY, 0 );
    if (nResult < 0) then
        MessageBox( @ERROR_UNINSTSETUP, WARNING );
    endif;

    szAppPath = TARGETDIR; // TO DO : if your application .exe is in a subfolder
                           // of TARGETDIR then add subfolder

    if ((g_bIs32BitSetup) && (g_bIsShellExplorer)) then
        RegDBSetItem( REGDB_APPPATH, szAppPath );
        RegDBSetItem( REGDB_APPPATH_DEFAULT, szAppPath ^ @PRODUCT_KEY );
        RegDBSetItem( REGDB_UNINSTALL_NAME, @UNINST_DISPLAY_NAME );
    endif;

    if (!g_bIsWindowsNT4) then
        ComponentFilterOS ( MEDIA , 0 , ISOSL_NT40 , TRUE );
    else
        ComponentFilterOS ( MEDIA , 0 , ISOSL_WIN95 , TRUE );
    endif;

    //Change the Uninstall key in the registry
    RegDBSetDefaultRoot( HKEY_LOCAL_MACHINE );
    szKey = "\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall" ^ @UNINST_DISPLAY_NAME;
    Disable( LOGGING );
    szUninstDll = g_szTarget ^ "ADVINST.DLL";
    if (RegDBGetKeyValueEx( szKey, "UninstallString", nvType, szValue, nvSize) = 0) then
    	szValue = szValue + " -c" + "\"" + szUninstDll + "\"" + " -y -a -x";
   	if (RegDBSetKeyValueEx( szKey, "QuietUninstallString", nvType, szValue, nvSize ) = 0) then
	     	RegDBDeleteValue( szKey, "UninstallString");
    	endif;
    endif;
    Enable( LOGGING );


    // TO DO : any other tasks you want to perform before file transfer
    //
    // If you are installing self-registering files using the
    // batch method, remove the slashes from the line below:
    //
    //     Enable ( SELFREGISTERBATCH );

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  Function:  MoveFileData
//
//  Purpose:  This function handles the file transfer for
//            the setup.
//
///////////////////////////////////////////////////////////////////////////////
function MoveFileData()
    NUMBER nResult, nDisk;

begin

    nDisk = 1;
    SetStatusWindow( 0, "" );
    Disable( DIALOGCACHE );
    Enable( STATUS );
    StatusUpdate( ON, 100 );
    nResult = ComponentMoveData( MEDIA, nDisk, 0 );

    HandleMoveDataError( nResult );

    Disable( STATUS );

    return nResult;

end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: HandleMoveDataError
//
//  Purpose: This function handles the error (if any) during the file transfer
//           operation.
//
///////////////////////////////////////////////////////////////////////////////
function HandleMoveDataError( nResult )
    STRING szErrMsg, svComponent , svFileGroup , svFile;

begin

    svComponent = "";
    svFileGroup = "";
    svFile = "";

    switch (nResult)
        case 0:
            return 0;
        default:
            ComponentError ( MEDIA , svComponent , svFileGroup , svFile , nResult );
            szErrMsg = @ERROR_MOVEDATA  + "\n\n" +
                @ERROR_COMPONENT + " " + svComponent + "\n" +
                @ERROR_FILEGROUP + " " + svFileGroup + "\n" +
                @ERROR_FILE      + " " + svFile;
            SprintfBox( SEVERE, @TITLE_CAPTIONBAR, szErrMsg, nResult );
            bInstallAborted = TRUE;
            return nResult;
    endswitch;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: ProcessAfterDataMove
//
//  Purpose: This function performs any necessary operations needed after
//           all files have been transferred.
//
///////////////////////////////////////////////////////////////////////////////
function ProcessAfterDataMove()
    STRING szReferenceFile, szMsg, szProgram;
begin


/*  
//Sevinst is installed by nav, so we'll let nav install and uninstall it.
//if someday we decide we want to install sevinst we'll need to uninstall it
//in the custom dll also.


    // Installing SEVINST
    szProgram = SRCDIR ^ "..\\Nav9xMe\\Sevinst.exe";
	if(!Is(FILE_EXISTS, szProgram)) then
    	szProgram = SRCDIR ^ "..\\NavNTW2K\\Sevinst.exe";
	endif;
	if(!Is(FILE_EXISTS, szProgram)) then
    	szProgram = SRCDIR ^ "..\\Support\\Sevinst\\Sevinst.exe";
	endif;
	if(!Is(FILE_EXISTS, szProgram)) then
    	szProgram = SRCDIR ^ "..\\..\\Support\\Sevinst\\Sevinst.exe";
	endif;
	if(!Is(FILE_EXISTS, szProgram)) then
    	szProgram = SRCDIR ^ "Sevinst.exe";
	endif;
*/	
	
	if(Is(FILE_EXISTS, szProgram)) then
   	LaunchAppAndWait(szProgram, "/Q MININU", WAIT);
   else
   	if(MODE = NORMALMODE) then
   		MessageBox(@ERROR_NOSEVINST, WARNING);
   	endif;
   endif;

    CreateUnerasewRegDBEntries(TRUE);
    CreateWipeInfoRegDBEntries();

    InstallNTServices();

    // TO DO : update self-registered files and other processes that
    //        should be performed after the files have been transferred.
    //
    // If you are installing self-registering files using the
    // batch method, remove the slashes from the lines below:
    //
    //     if Do ( SELFREGISTRATIONPROCESS ) < 0 then
    //         szMsg = "File(s) failed to self-register: \n" + ERRORFILENAME;
    //         MessageBox (szMsg, WARNING);
    //     endif;

    // DeinstallSetReference specifies a file to be checked before
    // uninstallation. If the file is in use, uninstallation will not proceed.

    szReferenceFile = g_szTarget ^ @PRODUCT_KEY; // TO DO : If your file is in a
                                            // subfolder of g_szTarget add that here
    DeinstallSetReference( szReferenceFile );

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupRegistry
//
//  Purpose: This function makes the registry entries for this setup.
//
///////////////////////////////////////////////////////////////////////////////
function SetupRegistry()
    NUMBER nResult;
    STRING szKey, szShortTarget;
begin

    // Create UnEraseW RegKeys
    CreateUnerasewRegDBEntries(TRUE);

    // Create WipeInfo RegKeys
    CreateWipeInfoRegDBEntries();

    szShortTarget = g_szTarget;
	 StrRemoveLastSlash( szShortTarget );
	 LongPathToShortPath( szShortTarget );

	 szKey = "\\SOFTWARE\\Symantec\\InstalledApps";
	 Disable(LOGGING);
	 RegDBCreateKeyEx(szKey, "");
	 Enable(LOGGING);
	 RegDBSetKeyValueEx(szKey, "AdvTools", REGDB_STRING, szShortTarget, -1);
	
    // TO DO : Add all your registry entry keys here.
    // Call registry functions and/or create keys from
    // the InstallShield IDE's Resources pane.

    nResult = CreateRegistrySet( "" );

    return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupFolders
//
//  Purpose: This function creates all the folders and shortcuts for the
//           setup.  This includes program groups and items for Windows 3.1.
//
///////////////////////////////////////////////////////////////////////////////
function SetupFolders()
    NUMBER nResult;

begin


    // TO DO : Add all your folders (or program groups) along with shortcuts (or
    // program items). Call CreateProgramFolder and AddFolderIcon, and/or create
    // shortcuts etc. from the InstallShield IDE's Resources pane.
    //
    // Note : for 16-bit setups you should add an uninstaller icon pointing to
    //        your log file.  Under 32-bit this is automatically done by Windows.

    nResult = CreateShellObjects( "" );

    return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: CleanUpInstall
//
//  Purpose: This cleans up the setup.  Anything that should
//           be released or deleted at the end of the setup should
//           be done here.
//
///////////////////////////////////////////////////////////////////////////////
function CleanUpInstall()

begin

    ListDestroy( listStartCopy );

    if (bInstallAborted) then
        return 0;
    endif;

    DialogShowSdFinishReboot();

    if (BATCH_INSTALL) then // ensure locked files are properly transferred
        CommitSharedFiles(0);
    endif;

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupInstall
//
//  Purpose: This will initialize the setup.  Any general initialization
//           needed for the installation should be performed here.
//
///////////////////////////////////////////////////////////////////////////////
function SetupInstall()

begin

    Enable( CORECOMPONENTHANDLING );

    bInstallAborted = FALSE;

    //  Create list of end user selections to be displayed by DialogShowSdStartCopy()  //

    listStartCopy = ListCreate(STRINGLIST);

    ListAddString( listStartCopy, @SUMMARY, AFTER );

    if (g_bIs32BitSetup) then
        g_szTarget = PROGRAMFILES ^ @PRODUCT_NAME;
    else
        g_szTarget = PROGRAMFILES ^ @PRODUCT_NAME16; // use short names
    endif;

    TARGETDIR  = g_szTarget;

    SdProductName( @PRODUCT_NAME );

    Enable( DIALOGCACHE );

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  SetupScreen
//
//  Purpose:  This function establishes the screen look.  This includes
//            colors, fonts, and text to be displayed.
//
///////////////////////////////////////////////////////////////////////////////
function SetupScreen()

begin

    Enable( FULLWINDOWMODE );
    Enable( INDVFILESTATUS );
    SetTitle( @TITLE_MAIN, 24, WHITE );

    SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION ); // Caption bar text.

    Enable( BACKGROUND );

    Delay( 1 );
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  CheckRequirements
//
//  Purpose:  This function checks all minimum requirements for the
//            application being installed.  If any fail, then the user
//            is informed and the setup is terminated.
//
///////////////////////////////////////////////////////////////////////////////
function CheckRequirements()
    NUMBER  nvDx, nvDy, nvResult;
    STRING  svResult;

begin

    g_bIsShellExplorer = FALSE;
    g_bIsWindowsNT4    = FALSE;
    g_bIsWindowsNT351  = FALSE;
    g_bIsWindows95     = FALSE;
    g_bIsWindows98     = FALSE;

    // Check screen resolution.
    GetExtents( nvDx, nvDy );

    if (nvDy < 480) then
        MessageBox( @ERROR_VGARESOLUTION, WARNING );
        abort;
    endif;

    // Set 'setup' operation mode
    g_bIs32BitSetup = TRUE;
    GetSystemInfo( ISTYPE, nvResult, svResult );
    if (nvResult = 16) then
        g_bIs32BitSetup = FALSE; // running 16-bit setup
        return 0; // no additional information required
    endif;

    // --- 32-bit testing after this point ---

    // Determine the target system's operating system.
    GetSystemInfo( OS, nvResult, svResult );

    if (nvResult = IS_WINDOWSNT) then
        // Check to see if OS is Windows NT 4.0 or Windows NT 3.51,
        // and if the shell being used is the Explorer shell.
        if (GetSystemInfo( WINMAJOR, nvResult, svResult ) = 0) then
            if (nvResult >= 4) then
                g_bIsShellExplorer = TRUE;
                g_bIsWindowsNT4 = TRUE;
            else
            	g_bIsWindowsNT351 = TRUE;
            endif;
        endif;

    elseif (nvResult = IS_WINDOWS9X) then
        g_bIsShellExplorer = TRUE;
        // Check to see if OS is Windows 95 or Windows 98
        GetSystemInfo (WINMINOR, nvResult, svResult);
        if (nvResult < 10) then
           g_bIsWindows95 = TRUE;
        else
           g_bIsWindows98 = TRUE;
        endif;
    endif;

end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdWelcome
//
//  Purpose: This function handles the standard welcome dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdWelcome()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "";
    szMsg   = "";
    nResult = SdWelcome( szTitle, szMsg );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdLicense
//
//  Purpose: This function displays the license agreement dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdLicense()
    NUMBER nResult;
    STRING szTitle, szMsg, szQuestion, szLicenseFile;

begin

    szLicenseFile = SUPPORTDIR ^ "license.txt";
    szTitle    = "";
    szMsg      = "";
    szQuestion = "";
    nResult    = SdLicense( szTitle, szMsg, szQuestion, szLicenseFile );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdAskDestPath
//
//  Purpose: This function asks the user for the destination folder.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdAskDestPath()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "";
    szMsg   = "";
    nResult = SdAskDestPath( szTitle, szMsg, g_szTarget, 0 );

    if (g_szTargetPath != "") then
        TARGETDIR = g_szTargetPath;
        g_szTarget = g_szTargetPath;
    else
        TARGETDIR = g_szTarget;
    endif;

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdStartCopy
//
//  Purpose: This function displays the dialog preceding the start of the
//           file transfer process.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdStartCopy()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "";
    szMsg   = "";
    nResult = SdStartCopy( szTitle, szMsg, listStartCopy );
	
    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdFinishReboot
//
//  Purpose: This function will show the last dialog of the product.
//           It will allow the user to reboot and/or show some readme text.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdFinishReboot()
    NUMBER nResult, nDefOptions;
    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2;
    NUMBER bOpt1, bOpt2;

begin

    if (!BATCH_INSTALL && !g_bRebootInstall) then
        bOpt1 = FALSE;
        bOpt2 = FALSE;
        szMsg1 = "";
        szMsg2 = "";
        szOption1 = "";
        szOption2 = "";
        nResult = SdFinish( szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2 );
        return 0;
    endif;

    nDefOptions = SYS_BOOTMACHINE;
    szTitle     = "";
    szMsg1      = "";
    szMsg2      = "";
    nResult     = SdFinishReboot( szTitle, szMsg1, nDefOptions, szMsg2, 0 );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function:	InstallNProtectServices
//
// Purpose:	This function install the NT services
//
///////////////////////////////////////////////////////////////////////////////
function InstallNTServices()
    STRING szProgram;
begin                      				

   // Install NProtect service and driver
   szProgram = g_szTarget ^ "AdvChk.EXE";
   if(Is(FILE_EXISTS, szProgram)) then
	//We launch advchk with the /I so that if we're on 9x so advchk doesn't pop up the "need to reboot" message.
   	LaunchAppAndWait( szProgram, "/I", WAIT );
   else
   	if(MODE = NORMALMODE) then
   		MessageBox(@ERROR_NOADVCHK, WARNING);
   	endif;
   endif;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:	ParseCmdLine
//
// Purpose:	This function install the NT services
//
///////////////////////////////////////////////////////////////////////////////
function ParseCmdLine()
    STRING szCmdlineDelimiters, szString;
    NUMBER nResult, nStrLen;
    BOOL bValidSwitchChar;
    LIST CmdLineList;
begin                      				

    // Parse the command-line parameter into the list
    CmdLineList = ListCreate(STRINGLIST);
    szCmdlineDelimiters = "-";
    StrGetTokens(CmdLineList, CMDLINE, szCmdlineDelimiters);

    // loop through the user command-line switches and set variables accordingly
    nResult = ListGetFirstString(CmdLineList, szString);
    while (nResult != END_OF_LIST)
        switch (szString[0])
            case "p","P":
                nStrLen = StrLength(szString);
                CopyBytes(g_szTargetPath, 0, szString, 2, nStrLen - 3);
            default:
                bValidSwitchChar = FALSE;
        endswitch;

        // fetch the next string
        nResult = ListGetNextString(CmdLineList, szString);
    endwhile;
end;

// --- include script file section ---

#include "sddialog.rul"
#include "unerasew.rul"
#include "wipeinfo.rul"









