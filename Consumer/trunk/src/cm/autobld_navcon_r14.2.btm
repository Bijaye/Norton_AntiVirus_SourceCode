:if "%1"=="" goto USAGE

:start
echo.
echo %0
echo Revision # 2

set BUILDFORGE=yes
set TESTMODE=no
set CMCERTIFIED=yes

set P4PORT=perforce.symantec.com:1666
set EMAIL=nruva@symantec.com
set BUILDER=Nick Ruva
set BUILDER_SHORT=nruva

set POSTINGSERVER=\\ussm-cpd\ussm-cpd
set ARCHIVESERVER=\\ussm-cpd\ussm-cpd

set BUILDSITE=Santa Monica
set GENERIC=cm-rack-1-04-generic-client
set PRODCLIENT=navconsumer_r14.2_cm_client
set DEVBUILDCLIENT=navconsumer_r14.2_devbuild
set RELEASECLIENT=
set CLIENTPATH=\depot\Norton_Antivirus\Consumer\trunk\src\cm\clientspecs
set PRODNAME=NAV Consumer r14.2
set CODENAME=NAVCON_r14.2
set PRODVERSION=r14.2

echo.
iff "%TESTMODE" eq "yes" then
  echo testmode=yes
  set MAILLISTFILE=maillist_navcon_test.txt
  echo MAILLISTFILE=maillist_navcon_test.txt
else
  echo testmode=no
  set MAILLISTFILE=maillist_navcon.txt
  echo MAILLISTFILE=maillist_navcon.txt
endiff
echo.

set INIT_DIR=\depot\Norton_Antivirus\Consumer\trunk\src\cm

iff %CMCERTIFIED=no then
  set BUILDFLAGDIR=\Build_Flags\NavConsumer\devbuild
  set LASTSUCCESSNUMFILE=r14.2_devbuild_last_success_bldnum.txt
  set BUILDROOT=\bld_area\navcon_devbuild_r14.2
  set BUILDBASEDIR=%BUILDROOT%\nav
  set CHECKBINFILE=%BUILDBASEDIR%\src\BIN.IRU\Navw32.exe
  set POSTINGSCRIPT=post_devbuild_r14.2.btm  
elseiff %CMCERTIFIED=yes then
  set BUILDFLAGDIR=\Build_Flags\NavConsumer\cmbuild
  set LASTSUCCESSNUMFILE=r14.2_cmbuild_last_success_bldnum.txt
  set BUILDROOT=\bld_area\navcon_r14.2
  set BUILDBASEDIR=%BUILDROOT%\nav
  set CHECKBINFILE=%BUILDBASEDIR%\src\BIN\BIN.IRU\Navw32.exe
  set POSTINGSCRIPT=Post_NavConsumer_r14.2.btm
endiff

set CM_DIR=%BUILDBASEDIR\src\cm
set SCRIPTSDIR=%BUILDBASEDIR\src\cm
set LOGNAME=%SCRIPTSDIR%\cmbuildlog.txt
set POSTLOGNAME=%SCRIPTSDIR%\postinglog.txt

iff "%TESTMODE" eq "yes" then
  set LABELBASE=navconsumer_r14.2_dummylabel
  echo set LABELBASE=navconsumer_r14.2_dummylabel
else 
  set LABELBASE=navconsumer_r14.2
  echo set LABELBASE=navconsumer_r14.2
endiff

set LAYOUTZIPFILE=
set ZIPFILE_BE=navconsumer_r14.2
set ZIPFILE_FINAL=navconsumer_r14.2_final
set ZIPFILE_LOC=navconsumer_r14.2_loc
set ZIPFILE_NU=navconsumer_r14.2_nu
set ARCHIVEFLAGBASE=navconsumer_r14.2_archive_okay
set BLDHISTINFOTEXT=bldhistinfo_navcon_r14.2.txt
set WINZIPCMD=c:\progra~1\winzip
set FOUND_ERRS=founderrs_navconsumer_r14.2.txt
set TOOLSDIR=r:
set BUILD_DRIVE=c:
: FREESPACEREQUIRED is in Mb
set FREESPACEREQUIRED=12000
set EXIT_CODE=0

rem Automation Level: * W2.12 *

iff "%BUILDFORGE" EQ "yes" then
  set DELAYTIME=0
  echo DELAYTIME set to 0.
  set TERMINATIONCMD=exit
  echo TERMINATIONCMD set to exit.
else
  set DELAYTIME=2
  echo DELAYTIME set to %DELAYTIME.
  set TERMINATIONCMD=quit
  echo TERMINATIONCMD set to quit.
endiff

rem ------------------------------------------------------------------------
rem Build logs and error logs go to %SCRIPTSDIR.
rem    (Which is in the B.E. )
rem Mail notification text files go to %INIT_DIR.
rem BLDHIST stuff goes into %INIT_DIR (because %CM_DIR does not exist yet)
rem Client spec and label temp files go to %INIT_DIR.
rem %FOUND_ERRS% is in the %INIT_DIR.
rem ------------------------------------------------------------------------

rem iff "%1" EQ "" then
rem   echo.
rem   echo You must provide the build number parameter.
rem   echo.
rem   echo See usage.
rem   echo.
rem   goto usage
rem endiff

iff "%P4USER" = "" then
  echo.
  echo I can't find the Perforce user.
  echo.
  %TERMINATIONCMD 
endiff

iff "%P4PASSWD" = "" then
  echo.
  echo I can't find the Perforce password.
  echo.
  %TERMINATIONCMD 
endiff

echo.
echo Checking to see if ussm-cpd\archives is mapped...
echo.
delay %DELAYTIME
iff not isdir "j:\Build_Flags" then
    echo Can't find ussm-cpd\archives connection.  Attempting to map...
    echo.
    net use j: /d /y
    net use j: \\ussm-cpd\archives
    iff %? ne 0 then 
      echo *** ERROR ***      Unable to attach to ussm-cpd.
      set ERRORMSG=OTHERERROR Unable to attach to ussm-cpd.
      %TERMINATIONCMD
    endiff
else
    echo ussm-cpd is mapped to j:.
    delay %DELAYTIME
endiff

echo.
echo Getting last successful build number.
echo.
delay %DELAYTIME
iff not isdir "j:%BUILDFLAGDIR" then
    echo Can't find the %BUILDFLAGDIR directory.
    echo.
    %TERMINATIONCMD
endiff

iff not exist "j:%BUILDFLAGDIR\%LASTSUCCESSNUMFILE" then
    echo Can't find the %BUILDFLAGDIR\%LASTSUCCESSNUMFILE file.
    echo.
    %TERMINATIONCMD
endiff

set BLDNUMFILEHANDLE=%@FILEOPEN[j:%BUILDFLAGDIR\%LASTSUCCESSNUMFILE,read]
set LAST_BUILD_NUM=%@FILEREAD[%BLDNUMFILEHANDLE]
echo LAST_BUILD_NUM = %LAST_BUILD_NUM
echo.
delay %DELAYTIME

rem Closing file...
set BLDCLOSEHANDLE=%@FILECLOSE[%BLDNUMFILEHANDLE]
set BLDNUM=%@EVAL[%LAST_BUILD_NUM+1]

echo ***************************************************
echo %PRODNAME Build # %BLDNUM
echo ***************************************************
echo.
delay %DELAYTIME


REM Create a title for the 4NT window that will reflect the project name and build number

iff "%TESTMODE" eq "yes" then
  title %PRODNAME Build %BLDNUM   * testmode=yes *
else 
  title %PRODNAME Build %BLDNUM
endiff

iff "%TESTMODE" eq "yes" then
  echo.
  echo ******************
  echo TESTMODE = yes
  echo ******************
else 
  echo TESTMODE = no
endiff

rem --------------------
rem CLEAN UP
rem --------------------

if exist %BUILD_DRIVE%\%LOGNAME del /z %BUILD_DRIVE%\%LOGNAME
if exist %BUILD_DRIVE%\%POSTLOGNAME del /z %BUILD_DRIVE%\%POSTLOGNAME
if exist %INIT_DIR%\%BLDHISTINFOTEXT del /z %INIT_DIR%\%BLDHISTINFOTEXT
if exist %INIT_DIR%\%FOUND_ERRS% del /z %INIT_DIR%\%FOUND_ERRS%
if exist %INIT_DIR%\*.sql del /z %INIT_DIR%\*.sql
echo.

rem
rem Preserve the original path.
rem
gosub env_save

:goto dobuild


:start_build_now

echo.
echo Checking for maillist file...
echo.
delay %DELAYTIME

iff not exist %INIT_DIR\%MAILLISTFILE then
  echo File %MAILLISTFILE does not exist! Sync out the cm directory and start again.
  set EXIT_CODE=1
  %TERMINATIONCMD %EXIT_CODE
endiff
iff not exist %INIT_DIR\breaklist.txt then
  echo File breaklist.txt does not exist! Sync out the cm directory and start again.
  set EXIT_CODE=1
  %TERMINATIONCMD %EXIT_CODE
endiff
delay %DELAYTIME

echo.
echo Generating text for build start email...
echo.
delay %DELAYTIME

TEXT > %INIT_DIR\startmessage.txt
Team,

Message from automated build script - this script is supported by the CM staff.

!PRODNAME! CM Build #!buildnumber! is starting now.


   -!BUILDER_SHORT!
___________________________________________________________________
  This script is supported by !BUILDER!, Configuration Management

ENDTEXT


call python r:\cm\sr.py %INIT_DIR\startmessage.txt "!buildnumber!" "%BLDNUM"
call python r:\cm\sr.py %INIT_DIR\startmessage.txt "!PRODNAME!" "%PRODNAME"
call python r:\cm\sr.py %INIT_DIR\startmessage.txt "!BUILDER!" "%BUILDER"
call python r:\cm\sr.py %INIT_DIR\startmessage.txt "!BUILDER_SHORT!" "%BUILDER_SHORT"

echo.
echo Sending out build start email...
echo.
delay %DELAYTIME

iff "%TESTMODE" eq "yes" then
  echo.
  echo TESTMODE:  Send email to %MAILLISTFILE
  echo.
endiff

echo call python r:\cm\sendmail.py %INIT_DIR\%MAILLISTFILE "CM Build Notification: %PRODNAME Build %BLDNUM is starting" %INIT_DIR\startmessage.txt /q /s
call python r:\cm\sendmail.py %INIT_DIR\%MAILLISTFILE "CM Build Notification: %PRODNAME Build %BLDNUM is starting" %INIT_DIR\startmessage.txt /q /s

delay %DELAYTIME

iff "%CMCERTIFIED" eq "no" then
  echo.
  echo DEVBUILD:  Skipping database entry.
  echo.
  delay %DELAYTIME
  goto /i prelim
endiff


echo.
echo ********************************************************
echo Setting database variables...
echo ********************************************************
echo.

echo.

call unset_bld_environment

set bld_info_file=%INIT_DIR\%BLDHISTINFOTEXT
set bld_insert=%CODENAME

: Start putting stuff in bld_info_file

echo bld_label_count=1                                    > %bld_info_file%
echo bld_label_1="%LABELBASE.%BLDNUM"                    >> %bld_info_file%
echo bld_client_1="%PRODCLIENT"                          >> %bld_info_file%
echo bld_build_number=%BLDNUM                                 >> %bld_info_file%
echo bld_zipfile="%ZIPFILE_BE%_%BLDNUM.zip"              >> %bld_info_file%
echo bld_code_name="%CODENAME"                           >> %bld_info_file%
echo bld_product="%PRODNAME"                             >> %bld_info_file%
echo bld_os="NT"                                         >> %bld_info_file%
echo bld_platform="X86"                                  >> %bld_info_file%
echo bld_version="%PRODVERSION"                          >> %bld_info_file%
echo bld_site="%BUILDSITE"                               >> %bld_info_file%
echo bld_builder="%BUILDER"                              >> %bld_info_file%

: Starting build!
: Set the bld_start_time variable.


echo.
echo ********************************************************
echo Setting start time for database...
echo ********************************************************
echo.
delay %DELAYTIME

call gettime start
delay %DELAYTIME
echo.
echo Build started:     %bld_start_time%
delay %DELAYTIME

:prelim
echo.
echo ********************************************************
echo Checking to see if ussm-cpd is already mapped...
echo ********************************************************
echo.
delay %DELAYTIME

iff not isdir "h:\Unreleased_Builds\NAV\r14.2" then
    echo \\ussm-cpd was not found.
    echo.
    set ERRORMSG=OTHERERROR ussm-cpd connection not found.
    goto /i errmsg
else
    echo ussm-cpd is mapped to h:.
    delay %DELAYTIME
endiff

echo.
echo *****************************************************************
echo Checking to see if \\ussm-cpd\archives is already mapped...
echo *****************************************************************
echo.
delay %DELAYTIME

iff not isdir "j:\archive_flags" then
    echo Can't find ussm-cpd\archives connection.  Attempting to map...
    echo.
    net use j: /d /y
    net use j: \\ussm-cpd\ussm-cpd\Build_Environments\archives
    iff %? ne 0 then 
      echo *** ERROR ***      Unable to attach to ussm-cpd\archives.
      set ERRORMSG=OTHERERROR Unable to attach to ussm-cpd\archives..
      goto /i errmsg
    endiff
else
    echo archives are already mapped to j:.
    delay %DELAYTIME
endiff

echo.
echo ********************************************************
echo Checking to see if ussm-dev1\tools is already mapped...
echo ********************************************************
echo.
delay %DELAYTIME

iff not isdir "r:\cm" then
    echo \\ussm-dev1\tools was not found.
    echo.
    set ERRORMSG=OTHERERROR ussm-dev1\tools connection not found.
    goto /i errmsg
else
    echo ussm-dev1\tools is mapped to r:.
    delay %DELAYTIME
endiff

iff "%TESTMODE" eq "yes" then
  echo.
  echo TESTMODE:  Skipping previous archive test...
  echo.
  delay %DELAYTIME
  goto /i toolslist
endiff

iff "%CMCERTIFIED" eq "no" then
  echo.
  echo DEVBUILD:  Skipping previous archive test...
  echo.
  delay %DELAYTIME
  goto /i toolslist
endiff

echo.
echo *************************************************************************
echo Checking to see if previous archive file was created and validated...
echo *************************************************************************
echo.
delay %DELAYTIME

echo Checking for previous flag \\ussm-cpd\ussm-cpd\Build_Environments\archives\Archive_Flags\%ARCHIVEFLAGBASE%_%@EVAL[%BLDNUM-1].txt...
echo.
delay %DELAYTIME
iff not exist "\\ussm-cpd\ussm-cpd\Build_Environments\archives\Archive_Flags\%ARCHIVEFLAGBASE%_%@EVAL[%BLDNUM-1].txt" then
      echo Archive flag for previous build not found.
      echo.
      delay %DELAYTIME
      iff not exist "c:\archives\%ZIPFILE_BE%_%@EVAL[%BLDNUM-1].zip" then
      echo The previous build environment archive is not on the build machine
      echo The previous build archive (CM build # %@EVAL[%BLDNUM-1]) was not successfully created. Aborting build.
      set ERRORMSG=CMERROR The previous build archive (CM build # %@EVAL[%BLDNUM-1]) was not successfully created. Aborting build.
      goto /i errmsg
      endiff

      else
      echo The archive was found on the build machine, but no flag was set when previously run.
      echo emailing CM to copy this archive to the server and continuing the build.
      echo call python r:\cm\sendmail.py %EMAIL% "Archive Copy Failed: %PRODNAME Build %@EVAL[%BLDNUM-1]" "-no-" /q /s
      call python r:\cm\sendmail.py %EMAIL% "Archive Copy Failed: %PRODNAME Build %@EVAL[%BLDNUM-1]" "-no-" /q /s
      echo creating previous build flag on ussm-cpd
      echo complete > \\ussm-cpd\ussm-cpd\Build_Environments\archives\Archive_Flags\Archive_Flags\%ARCHIVEFLAGBASE%_%@EVAL[%BLDNUM-1].txt
endiff
echo Archive flag found.
delay %DELAYTIME

:toolslist
echo.
echo ***********************************************
echo tools info...
echo ***********************************************
echo.
echo The following tools are required:
echo ---------------------------------------------------------------------------
echo.
echo.
delay %DELAYTIME

:goto dobuild
:goto checkprodbuild
:goto nextemail
:goto makebezip

echo.
echo **********************************************
echo Create generic cm Windows client spec...
echo **********************************************
echo.

echo cd %INIT_DIR
cd %INIT_DIR

echo.
echo set P4CLIENT=%GENERIC

set P4CLIENT=%GENERIC

@echo Client:  %GENERIC% > temp.cli
@echo Description:  Generic CM Spec for Windows >> temp.cli
@echo Root:  c:\depot >> temp.cli
@echo Options:  allwrite clobber nocompress crlf unlocked modtime >> temp.cli
@echo View: >> temp.cli
@echo        //depot/... //%GENERIC%/... >> temp.cli
@echo. >> temp.cli

@call p4 client -i < temp.cli
iff "%_?" ne "0" then 
  set ERRORMSG=CMERROR Failed to create generic client.  Perforce may be down.
  delay %DELAYTIME  
  goto /i errmsg
endiff


:syncbuildclient
echo.
echo ********************************************************************
echo Sync the building client text file.
echo ********************************************************************
echo.
delay %DELAYTIME

echo call p4 sync -f %CLIENTPATH\%PRODCLIENT.clientspec
delay %DELAYTIME
call p4 sync -f %CLIENTPATH\%PRODCLIENT.clientspec
iff "%_?" ne "0" then 
  set ERRORMSG=CMERROR Failed to sync build product client text.
  delay %DELAYTIME
  goto /i errmsg
endiff

:nextmakeprodclient
echo.
echo ********************************************************************
echo Creating the build product client spec:
echo CLIENT = %PRODCLIENT
echo by using the text file as input...
echo ********************************************************************
echo.

echo set P4CLIENT=%PRODCLIENT
@set P4CLIENT=%PRODCLIENT
delay %DELAYTIME
echo call p4 client -i < %CLIENTPATH\%PRODCLIENT.clientspec
delay %DELAYTIME
call p4 client -i < %CLIENTPATH\%PRODCLIENT.clientspec
iff "%_?" ne "0" then 
  set ERRORMSG=CMERROR Failed to create product client spec.
  delay %DELAYTIME  
  goto /i errmsg
endiff
delay %DELAYTIME


:nextdelete
echo.
echo **********************************************
echo If previous build exists, delete it...
echo **********************************************
echo.
delay %DELAYTIME

set SPACEBEFOREDELETE=
set SPACEAFTERDELETE=
set SPACEFREEDUP=
set SPACEAFTERBUILD=

set SPACEBEFOREDELETE=%@diskfree[%BUILD_DRIVE%,m]
echo Space free before delete:     %SPACEBEFOREDELETE
echo.
delay %DELAYTIME

md /s %BUILD_DRIVE%%BUILDBASEDIR
echo dummy > %BUILD_DRIVE%%BUILDBASEDIR\dummy.txt

del %BUILD_DRIVE%%BUILDBASEDIR /sxzy >& %INIT_DIR\deletedfiles.txt

:checkdiskspace
echo.
echo **********************************************
echo Check for %FREESPACEREQUIRED Mb of free space...
echo **********************************************
echo.
delay %DELAYTIME

set SPACEAFTERDELETE=%@diskfree[%BUILD_DRIVE%,m]
set SPACEFREEDUP=%@EVAL[%SPACEAFTERDELETE%-%SPACEBEFOREDELETE%]
echo Space free after delete:     %SPACEAFTERDELETE
echo Space freed up by delete:    %SPACEFREEDUP
echo Space required:              %FREESPACEREQUIRED
echo.
delay %DELAYTIME


iff not %@diskfree[%BUILD_DRIVE%,m] gt %FREESPACEREQUIRED then
    echo Space free:     %@diskfree[%BUILD_DRIVE%,m]
    echo Space required: %FREESPACEREQUIRED%
    echo.
    echo Not enough free disk space.  Contact CM to resolve this problem.
    echo.
    set ERRORMSG=CMERROR Insufficient space %@diskfree[%BUILD_DRIVE%,m] Mb, need %FREESPACEREQUIRED Mb. Please contact CM.
    goto /i errmsg
else
    echo There is enough free space:  %@diskfree[%BUILD_DRIVE%,m] Mb
    delay %DELAYTIME
endiff

echo.
echo %_CWD
echo.
delay %DELAYTIME


echo.
echo ***************************************************************
echo Checking to see if DEV label exists...
echo ***************************************************************
echo.
delay %DELAYTIME

echo set P4CLIENT=%PRODCLIENT
@set P4CLIENT=%PRODCLIENT
echo.

:: This is a test for the existence of a syncing label.

p4 sync -n @dev_navconsumer_r14.2.%BLDNUM >& nul
set x=%?
iff %x == 0 then
    echo.^echo Dev label dev_navconsumer_r14.2.%BLDNUM exists...  will sync to the label.^echo.
    set cmd=p4 sync -f @dev_navconsumer_r14.2.%BLDNUM
    set DEV_LABEL_EXISTS=yes
else
    echo.^echo Dev label dev_navconsumer_r14.2.%BLDNUM does not exist.  Will sync to the tip.^echo.
    set cmd=p4 sync -f
    set DEV_LABEL_EXISTS=no
endiff


echo.
echo ***************************************************************
echo Syncing...
echo ***************************************************************
echo.
delay %DELAYTIME

echo %cmd | tee %INIT_DIR%\p4SyncUsed.txt
%cmd > %INIT_DIR\sync.txt
iff "%?" ne "0" then 
  echo p4 sync failed.  Please contact CM.
  set ERRORMSG=CMERROR p4 sync failed.  Please contact CM.
  goto /i errmsg
endiff
echo.
echo Done.
echo.

cd %SCRIPTSDIR

iff "%DEV_LABEL_EXISTS" eq "no" then 
  echo.
  echo       *** Since DEV label does NOT exist: ***
  echo We will create and update the CM label AFTER the header file update.
  echo.
  delay %DELAYTIME
  iff "%CMCERTIFIED" eq "no" then
    echo.
    echo DEVBUILD:  Skipping header update...
    echo.
    delay %DELAYTIME
  elseiff "%CMCERTIFIED" eq "yes" then
    echo ********************************************************************
    echo Update the header file.
    echo ********************************************************************
    echo.
    delay %DELAYTIME
    echo P4CLIENT=%P4CLIENT
    echo call %CM_DIR\update_nav_headers %BLDNUM
    call %CM_DIR\update_nav_headers %BLDNUM
    iff "%_?" ne "0" then 
      set ERRORMSG=CMERROR Header update failed.
      delay %DELAYTIME
      goto /i errmsg
    endiff
  endiff
  gosub makelabel  
endiff


iff "%DEV_LABEL_EXISTS" eq "yes" then 
  echo.
  echo       *** Since DEV label exists: ***
  echo We will create and update the CM label now, BEFORE the header file update.
  echo.
  delay %DELAYTIME
  gosub makelabel  
  iff "%CMCERTIFIED" eq "no" then
    echo.
    echo DEVBUILD:  Skipping header update...
    echo.
    delay %DELAYTIME
  elseiff "%CMCERTIFIED" eq "yes" then
    echo ********************************************************************
    echo Update the header file.
    echo ********************************************************************
    echo.
    delay %DELAYTIME
    echo P4CLIENT=%P4CLIENT
    echo call %INIT_DIR\update_nav_headers %BLDNUM
    call %INIT_DIR\update_nav_headers %BLDNUM
    iff "%_?" ne "0" then 
      set ERRORMSG=CMERROR Header update failed.
      delay %DELAYTIME
      goto /i errmsg
    endiff
  endiff
endiff

:dobuild
echo.
echo ***************************************************************
echo Calling the product build script...
echo ***************************************************************
echo.
delay %DELAYTIME

rem echo.
rem echo Make changes to the source code to induce an error here if desired...
rem echo.
rem pause

echo cd %SCRIPTSDIR
cd %SCRIPTSDIR
echo.
delay %DELAYTIME
echo.
echo %_CWD
echo.
delay %DELAYTIME

echo.
echo Normally, we build with /RETAIL /OEM /SUITE /RENTAL switches.
echo.
echo Per Hannah, we will build with /RETAIL, /RENTAL, and /SUITE switches.
echo.

:set cmd=call build.btm /RETAIL /OEM /SUITE /RENTAL
set cmd=call build.btm /RETAIL /SUITE /RENTAL

iff "%PHASE%" != "" then
  set cmd=call build.btm /RETAIL /SUITE /RENTAL /phase %PHASE%
endiff

rem
rem YES use a "tee" to capture a CM log.
rem 

echo %cmd
echo.
delay %DELAYTIME
%cmd | tee %LOGNAME
iff not %? eq 0 then
  echo.
  echo Build script ended with a non-zero return code.
  echo.
  set ERRORMSG=Build script ended with a non-zero return code.
  goto /i errmsg
endiff

echo.
echo Build log can be found in %SCRIPTSDIR%
echo.
delay %DELAYTIME
dir %SCRIPTSDIR%\
echo.

rem      Set LOGNAME to whatever the corrent log that's being looked at.
rem      Use LOGNAME later for attaching logs to emails.
rem      Use LOGNAME later for adding log to the database entry.


:checkprodbuild

echo.
echo ***************************************************************
echo Checking product build log...
echo ***************************************************************
echo.
delay %DELAYTIME

iff not exist %LOGNAME then
  echo.
  echo %LOGNAME not found.
  echo.
  set ERRORMSG=CMERROR No product build log file was found. Check CM build script.
  goto /i errmsg
endiff

gosub lookatlogs
echo.

if %@filesize[%INIT_DIR\%FOUND_ERRS%] gt 0 goto producterrors

echo No errors detected in build log.
echo.

goto lookforoutput

:producterrors
echo ********************************************
echo There are errors in the build log.
echo ********************************************
echo.
delay %DELAYTIME
echo.

set ERRORMSG=There are errors in the build log.

goto /i errmsg

:lookforoutput

echo.
echo Sanity check for a sample output binary...
echo.
if exist %CHECKBINFILE goto zeroerrs
delay %DELAYTIME

echo **************************************************
echo ERROR:  The file does not exist:
echo         %CHECKBINFILE
echo         Check for errors on the screen.
echo **************************************************
echo.
delay %DELAYTIME

:wehaveerrors
set ERRORMSG=No sanity check output file %CHECKBINFILE.
delay %DELAYTIME
goto /i errmsg

:zeroerrs
echo.
echo Found sanity check file %CHECKBINFILE.
echo.
echo ********************************
echo Build okay.  No errors.
echo ********************************
delay %DELAYTIME

:buildfinishup
:postit

echo.
echo ********************************************************
echo Checking again to verify %POSTINGSERVER is still mapped...
echo ********************************************************
echo.
delay %DELAYTIME

iff not isdir "h:\Unreleased_Builds\NAV" then
    echo \\ussm-cpd connection has been lost.
    echo.
    set ERRORMSG=OTHERERROR h:\ connection has been lost.  Contact CM.
    goto /i errmsg
else
    echo %POSTINGSERVER is mapped to h:.
    delay %DELAYTIME
endiff


echo.
echo **************************************************************
echo Creating layouts and posting to the server...
echo **************************************************************
echo.
delay %DELAYTIME

echo cd %SCRIPTSDIR
cd %SCRIPTSDIR
echo.
delay %DELAYTIME
echo.
echo %_CWD
echo.
delay %DELAYTIME

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: call the symbol posting script
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

echo.
echo posting symbols to symbol server...
echo.
call PostSymbols.btm %BLDNUM

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: call the posting script
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


echo.
echo Calling posting script...
echo.
delay %DELAYTIME
echo.
echo call %SCRIPTSDIR\%POSTINGSCRIPT %BLDNUM
echo.
delay %DELAYTIME
call %SCRIPTSDIR\%POSTINGSCRIPT %BLDNUM | tee %POSTLOGNAME
iff not %? eq 0 then
  rem change back to the build drive because the posting script leaves you on h:.
  %BUILD_DRIVE%
  cd %SCRIPTSDIR%
  echo.
  echo %POSTINGSCRIPT posting script ended with a non-zero return code.
  echo.
  echo See %POSTLOGNAME.
  echo.
  set ERRORMSG=CMERROR %POSTINGSCRIPT posting script ended with a non-zero return code. Contact CM.
  goto /i errmsg
endiff
rem change back to the build drive because the posting script leaves you on h:.
%BUILD_DRIVE%
cd %SCRIPTSDIR%
echo.
echo Posting script completed successfully.
echo.
delay %DELAYTIME


:postlog
if not exist c:%LOGNAME goto nextemail
echo.
echo *****************************************************
echo Post log to server...
echo *****************************************************
echo.

echo Posting log file...
delay %DELAYTIME
echo.
echo Creating directory...
echo.
delay %DELAYTIME
if not isdir h:\Unreleased_Builds\NAV\r14.2\!logs\%BLDNUM md /s h:\Unreleased_Builds\NAV\r14.2\!logs\%BLDNUM
echo.
echo Copying log...
delay %DELAYTIME
copy c:%LOGNAME h:\Unreleased_Builds\NAV\r14.2\!logs\%BLDNUM\navconsumer_%_HOUR%%_MINUTE%.log

:nextemail
echo.
echo *****************************************************
echo Generating text for build posted email...
echo *****************************************************
echo.
delay %DELAYTIME

TEXT > %INIT_DIR\endposted.txt
Team,

!prod_name! CM Build #!buildnumber! has been posted at the following location on ussm-cpd:

\Unreleased_Builds\NAV\r14.2\!buildnumber!

Please use your Symcorp account to access this server.


Metrics and archives will now be generated.  We will send another email when complete.
  
Please let me know if there are any problems with the build.

   -!BUILDER_SHORT!
___________________________________________________________________
     !BUILDER!, Configuration Management

ENDTEXT

@call python r:\cm\sr.py %INIT_DIR\endposted.txt "!buildnumber!" "%BLDNUM"
@call python r:\cm\sr.py %INIT_DIR\endposted.txt "!prod_name!" "%PRODNAME"
@call python r:\cm\sr.py %INIT_DIR\endposted.txt "!BUILDER!" "%BUILDER%"
@call python r:\cm\sr.py %INIT_DIR\endposted.txt "!BUILDER_SHORT!" "%BUILDER_SHORT%"

echo.
echo *****************************************************
echo Sending out build posted email...
echo *****************************************************
echo.
delay %DELAYTIME

iff "%TESTMODE" eq "yes" then
  echo.
  echo TESTMODE:  Send email to %MAILLISTFILE
  echo.
endiff


echo call python r:\cm\sendmail.py %INIT_DIR\%MAILLISTFILE "CM Build Notification: %PRODNAME Build %BLDNUM is posted" %INIT_DIR\endposted.txt /q /s
call python r:\cm\sendmail.py %INIT_DIR\%MAILLISTFILE "CM Build Notification: %PRODNAME Build %BLDNUM is posted" %INIT_DIR\endposted.txt /q /s

echo **************************************
echo Update successful CM build number flag
echo **************************************
echo.
echo Update successful CM build number %BLDNUM in j:%BUILDFLAGDIR\%LASTSUCCESSNUMFILE
delay %DELAYTIME
echo %BLDNUM > j:%BUILDFLAGDIR\%LASTSUCCESSNUMFILE
iff %_? ne 0 then 
  echo *** ERROR ***      Failed to update build number flag.
  set ERRORMSG=OTHERERROR Failed to update build number flag.
  goto /i errmsg
endiff
echo Done.

iff "%CMCERTIFIED" eq "no" then
  echo.
  echo DEVBUILD:  Skipping metrics, zips, database entry.
  echo.
  delay %DELAYTIME
  goto /i spacecalc
endiff


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: Info for Localization - Build Posted
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

cscript PublishBuildInfo.vbs -p "%PRODNAME%" -c "%CODENAME%" -v "%PRODVERSION%.00.%BLDNUM%" -l "\\ussm-cpd\ussm-cpd\Unreleased_Builds\NAV\%PRODVERSION%\%BLDNUM% <file:///\\\\ussm-cpd\\ussm-cpd\\Unreleased_Builds\\NAV\\%PRODVERSION%\\%BLDNUM% <file:///\\\\\\\\ussm-cpd\\\\ussm-cpd\\\\Unreleased_Builds\\\\NAV\\\\%PRODVERSION%\\\\%BLDNUM%>>"


echo.
echo **************************************************************
echo Running Buildnotes...
echo **************************************************************
echo.
delay %DELAYTIME

echo cd %SCRIPTSDIR
cd %SCRIPTSDIR
echo.
echo call BuildNotes /BUILD:%BLDNUM
echo.
delay %DELAYTIME
call BuildNotes /BUILD:%BLDNUM
delay %DELAYTIME


:checkarchives
echo.
echo *****************************************************************
echo Checking again to see if \\ussm-cpd\archives is still mapped...
echo *****************************************************************
echo.
delay %DELAYTIME

iff not isdir "j:\archive_flags" then
    echo Can't find ussm-cpd\archives connection.  Attempting to map...
    echo.
    net use j: /d /y
    net use j: \\ussm-cpd\archives
    iff %? ne 0 then 
      echo *** ERROR ***      ussm-cpd\archives connection lost. Can't remap.
      set ERRORMSG=OTHERERROR ussm-cpd\archives connection lost. Can't remap.
      goto /i errmsg
    endiff
else
    echo archives are still mapped to j:.
    delay %DELAYTIME
endiff

echo.
iff not isdir %BUILD_DRIVE%\archives then
  echo Making directory %BUILD_DRIVE%\archives
  echo mkdir %BUILD_DRIVE%\archives
  mkdir %BUILD_DRIVE%\archives
  delay %DELAYTIME
endiff

:makefinal

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: Make zip files
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

echo.
echo ***************************************************************
echo Zipping up the FINAL FOLDER...
echo ***************************************************************
echo.
delay %DELAYTIME

echo.
iff exist %BUILD_DRIVE%\archives\%ZIPFILE_FINAL%_%BLDNUM.zip then
  echo Deleting existing file %BUILD_DRIVE%\archives\%ZIPFILE_FINAL%_%BLDNUM.zip
  echo del %BUILD_DRIVE%\archives\%ZIPFILE_FINAL%_%BLDNUM.zip
  del %BUILD_DRIVE%\archives\%ZIPFILE_FINAL%_%BLDNUM.zip
  delay %DELAYTIME
endiff

echo.
echo cd %BUILDBASEDIR\src\Final
cd %BUILDBASEDIR\src\Final

: WZZIP USAGE
: -a means add files.
: -r means recursively include subfolders.
: -P means store all folder names.

echo.
echo call %WINZIPCMD%\wzzip -a -rP -whs "%BUILD_DRIVE%\archives\%ZIPFILE_FINAL%_%BLDNUM.zip" *.*
delay %DELAYTIME
call %WINZIPCMD%\wzzip -a -rP -whs "%BUILD_DRIVE%\archives\%ZIPFILE_FINAL%_%BLDNUM.zip" *.*
echo.

:makebezip


echo.
echo ***************************************************************
echo Zipping up the BUILD ENVIRONMENT without the Final folder...
echo ***************************************************************
echo.
delay %DELAYTIME

echo First, remove the Final folder by moving (renaming) it from the Consumer folder to the base folder.
echo.
delay %DELAYTIME

mkdir %BUILDROOT%\moved

echo move /s /q  %BUILDBASEDIR\src\Final %BUILDROOT%\moved\Final
move /s /q  %BUILDBASEDIR\src\Final %BUILDROOT%\moved\Final
delay %DELAYTIME
r14.
echo.
iff exist %BUILD_DRIVE%\archives\%ZIPFILE_BE%_%BLDNUM.zip then
  echo Deleting existing file %BUILD_DRIVE%\archives\%ZIPFILE_BE%_%BLDNUM.zip
  echo del %BUILD_DRIVE%\archives\%ZIPFILE_BE%_%BLDNUM.zip
  del %BUILD_DRIVE%\archives\%ZIPFILE_BE%_%BLDNUM.zip
  delay %DELAYTIME
endiff


echo.
echo cd %BUILDBASEDIR%
cd %BUILDBASEDIR%

: WZZIP USAGE
: -a means add files.
: -r means recursively include subfolders.
: -P means store all folder names.

echo.
echo call %WINZIPCMD%\wzzip -a -rP -whs "%BUILD_DRIVE%\archives\%ZIPFILE_BE%_%BLDNUM.zip" *.*
delay %DELAYTIME
call %WINZIPCMD%\wzzip -a -rP -whs "%BUILD_DRIVE%\archives\%ZIPFILE_BE%_%BLDNUM.zip" *.*
echo.

:makeloczip

echo.
echo ***************************************************************
echo Zipping up the LOCALIZATION BUILD ENVIRONMENT without tools...
echo ***************************************************************
echo.
delay %DELAYTIME

echo First, remove the Tools folders by moving them from the Consumer/nobuilds folder to the base folder.
echo.
delay %DELAYTIME

echo move /s /q  %BUILDBASEDIR%\nobuilds\551 %BUILDROOT%\moved\551
move /s /q  %BUILDBASEDIR%\nobuilds\551 %BUILDROOT%\moved\551
delay %DELAYTIME

echo move /s /q  %BUILDBASEDIR%\nobuilds\IS553 %BUILDROOT%\moved\IS553
move /s /q  %BUILDBASEDIR%\nobuilds\IS553 %BUILDROOT%\moved\IS553
delay %DELAYTIME

echo move /s /q  %BUILDBASEDIR%\nobuilds\msvc6sp5 %BUILDROOT%\moved\msvc6sp5
move /s /q  %BUILDBASEDIR%\nobuilds\msvc6sp5 %BUILDROOT%\moved\msvc6sp5
delay %DELAYTIME

echo move /s /q  %BUILDBASEDIR%\nobuilds\msvc7 %BUILDROOT%\moved\msvc7
move /s /q  %BUILDBASEDIR%\nobuilds\msvc7 %BUILDROOT%\moved\msvc7
delay %DELAYTIME

echo move /s /q  %BUILDBASEDIR%\nobuilds\nt40addk %BUILDROOT%\moved\nt40addk
move /s /q  %BUILDBASEDIR%\nobuilds\nt40addk %BUILDROOT%\moved\nt40addk
delay %DELAYTIME

echo move /s /q  %BUILDBASEDIR%\nobuilds\PlatSDK %BUILDROOT%\moved\PlatSDK
move /s /q  %BUILDBASEDIR%\nobuilds\PlatSDK %BUILDROOT%\moved\PlatSDK
delay %DELAYTIME

echo move /s /q  %BUILDBASEDIR%\SDKs\NV112005 %BUILDROOT%\moved\NV112005
move /s /q  %BUILDBASEDIR\SDKs\NV112005 %BUILDROOT%\moved\NV112005
delay %DELAYTIME

echo move /s /q  %BUILDBASEDIR%\SDKs\NV11OEM %BUILDROOT%\moved\NV11OEM
move /s /q  %BUILDBASEDIR%\SDKs\NV11OEM %BUILDROOT%\moved\NV11OEM
delay %DELAYTIME

echo move /s /q  %BUILDBASEDIR%\SDKs\NV11OEM_NOIWP %BUILDROOT%\moved\NV11OEM_NOIWP
move /s /q  %BUILDBASEDIR%\SDKs\NV11OEM_NOIWP %BUILDROOT%\moved\NV11OEM_NOIWP
delay %DELAYTIME
echo.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: Strip unwanted files from the environment
:::::::::::::::::::::::::::::::::::::::::::::::::::::::

copy %CM_DIR%\stripbe.btm %BUILDBASEDIR%\stripbe.btm
cd %BUILDBASEDIR%
call stripbe.btm
del stripbe.btm
echo "The files in this environment have been stripped for localization, do not use this environment for partials!" > readme.txt

iff exist %BUILD_DRIVE%\archives\%ZIPFILE_LOC%_%BLDNUM.zip then
  echo Deleting existing file %BUILD_DRIVE%\archives\%ZIPFILE_LOC%_%BLDNUM.zip
  echo del %BUILD_DRIVE%\archives\%ZIPFILE_LOC%_%BLDNUM.zip
  del %BUILD_DRIVE%\archives\%ZIPFILE_LOC%_%BLDNUM.zip
  delay %DELAYTIME
endiff

echo.
echo cd %BUILDBASEDIR
cd %BUILDBASEDIR

: WZZIP USAGE
: -a means add files.
: -r means recursively include subfolders.
: -P means store all folder names.

echo.
echo call %WINZIPCMD%\wzzip -a -rP -whs "%BUILD_DRIVE%\archives\%ZIPFILE_LOC%_%BLDNUM.zip" *.*
delay %DELAYTIME
call %WINZIPCMD%\wzzip -a -rP -whs "%BUILD_DRIVE%\archives\%ZIPFILE_LOC%_%BLDNUM.zip" *.*
echo.

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: Copy files to ussm-cpd
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
set BLD_ENV_DIR=/Build_Environments/navconsumer_r14.2

echo *******************************************************************
echo FTP zipfiles to ussm-cpd...
echo *******************************************************************
echo.

del %CM_DIR%\ftp.txt

echo Posting build to USNN-SCMFTP
echo Creating the FTP text file

echo user %USSMCPDuser% > %CM_DIR%\ftp.txt
echo %USSMCPDpasswd% >> %CM_DIR%\ftp.txt

echo cd %BLD_ENV_DIR% >> %CM_DIR%\ftp.txt

echo mkdir %BLDNUM% >> %CM_DIR%\ftp.txt

echo prompt >> %CM_DIR%\ftp.txt

echo trace >> %CM_DIR%\ftp.txt

echo bin >> %CM_DIR%\ftp.txt

echo lcd C:\archives >> %CM_DIR%\ftp.txt
echo cd %BLDNUM% >> %CM_DIR%\ftp.txt
echo put %ZIPFILE_LOC%_%BLDNUM.zip >> %CM_DIR%\ftp.txt
echo put %ZIPFILE_FINAL%_%BLDNUM.zip >> %CM_DIR%\ftp.txt
echo put %ZIPFILE_BE%_%BLDNUM.zip >> %CM_DIR%\ftp.txt

echo cd /Build_Environments/archives >> %CM_DIR%\ftp.txt
echo put %ZIPFILE_LOC%_%BLDNUM.zip >> %CM_DIR%\ftp.txt
echo put %ZIPFILE_FINAL%_%BLDNUM.zip >> %CM_DIR%\ftp.txt
echo put %ZIPFILE_BE%_%BLDNUM.zip >> %CM_DIR%\ftp.txt

echo bye >> %CM_DIR%\ftp.txt

C:
cd \

ftp -n -s:%CM_DIR%\ftp.txt ussm-cpd

echo Files have been transfered to USSM-CPD

del %CM_DIR%\ftp.txt

echo.


:testloczip
echo *******************************************************************
echo Testing localization build environment zipfile on \\ussm-cpd\archives...
echo *******************************************************************
echo.
delay %DELAYTIME

%WINZIPCMD%\wzunzip -t j:\%ZIPFILE_LOC%_%BLDNUM.zip
  iff not errorlevel eq 0 then
  echo Error found in Localization Zip File, reattempting the copy to archives
  del j:\%ZIPFILE_LOC%_%BLDNUM.zip
  copy %BUILD_DRIVE%\archives\%ZIPFILE_LOC%_%BLDNUM.zip j:\%ZIPFILE_LOC%_%BLDNUM.zip
  goto testloczip
endiff
echo Localization archive file is good.
delay %DELAYTIME
:echo.
:echo good > j:\Archive_Flags\%ARCHIVEFLAGBASE%_%BLDNUM.txt
:echo j:\Archive_Flags\%ARCHIVEFLAGBASE%_%BLDNUM.txt created.
:echo.
:delay %DELAYTIME

echo Delete temporary b.e. archive file.
echo del %BUILD_DRIVE%\archives\%ZIPFILE_LOC%_%BLDNUM.zip
del %BUILD_DRIVE%\archives\%ZIPFILE_LOC%_%BLDNUM.zip
echo.

:testfinalzip
echo *******************************************************************
echo Testing final zipfile on \\ussm-cpd\archives...
echo *******************************************************************
echo.
delay %DELAYTIME

%WINZIPCMD%\wzunzip -t j:\%ZIPFILE_FINAL%_%BLDNUM.zip
  iff not errorlevel eq 0 then
  echo Error found in the Final Zip File, reattempting the copy to archives
  del j:\%ZIPFILE_FINAL%_%BLDNUM.zip
  copy %BUILD_DRIVE%\archives\%ZIPFILE_FINAL%_%BLDNUM.zip j:\%ZIPFILE_FINAL%_%BLDNUM.zip
  goto testfinalzip
endiff
echo.
echo Archive file is good.
echo.
delay %DELAYTIME
:echo.
:echo good > j:\Archive_Flags\%ARCHIVEFLAGBASE%_%BLDNUM.txt
:echo j:\Archive_Flags\%ARCHIVEFLAGBASE%_%BLDNUM.txt created.
:echo.
:delay %DELAYTIME

echo Delete temporary b.e. archive file.
echo del %BUILD_DRIVE%\archives\%ZIPFILE_FINAL%_%BLDNUM.zip
del %BUILD_DRIVE%\archives\%ZIPFILE_FINAL%_%BLDNUM.zip
echo.


:testbezip
echo *******************************************************************
echo Testing build environment zipfile on \\ussm-cpd\archives...
echo *******************************************************************
echo.
delay %DELAYTIME

%WINZIPCMD%\wzunzip -t j:\%ZIPFILE_BE%_%BLDNUM.zip
  iff not errorlevel eq 0 then
  echo Error found in the BE Zip File, reattempting the copy to archives
  del j:\%ZIPFILE_BE%_%BLDNUM.zip
  copy %BUILD_DRIVE%\archives\%ZIPFILE_BE%_%BLDNUM.zip j:\%ZIPFILE_BE%_%BLDNUM.zip
  goto testbezip
endiff
echo.
echo Archive file is good.  Creating flag...
delay %DELAYTIME
echo.
echo good > j:\Archive_Flags\%ARCHIVEFLAGBASE%_%BLDNUM.txt
echo j:\Archive_Flags\%ARCHIVEFLAGBASE%_%BLDNUM.txt created.
echo.
delay %DELAYTIME

echo Delete temporary b.e. archive file.
echo del %BUILD_DRIVE%\archives\%ZIPFILE_BE%_%BLDNUM.zip
del %BUILD_DRIVE%\archives\%ZIPFILE_BE%_%BLDNUM.zip
echo.



:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: Split zip files
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


echo *******************************************************************
echo Splitting localization zipfile on ussm-cpd\build_environments...
echo *******************************************************************
echo.
delay %DELAYTIME

cdd h:\build_environments\navconsumer_%PRODVERSION%\%BLDNUM
iff not exist %ZIPFILE_LOC%_%BLDNUM.zip then
  echo.
  echo %ZIPFILE_LOC%_%BLDNUM.zip not found.
  echo.
  set ERRORMSG=CMERROR %ZIPFILE_LOC%_%BLDNUM.zip not found after copy to build_environments. Check CM build script.
  goto /i errmsg
endiff

echo Splitting...
echo.
echo @call split2 %ZIPFILE_LOC%_%BLDNUM.zip 100
@call split2 %ZIPFILE_LOC%_%BLDNUM.zip 100

echo cdd %BUILD_DRIVE%%INIT_DIR
cdd %BUILD_DRIVE%%INIT_DIR
echo.

echo Delete temporary loc archive file.
echo del %BUILD_DRIVE%\archives\%ZIPFILE_LOC%_%BLDNUM.zip
del %BUILD_DRIVE%\archives\%ZIPFILE_LOC%_%BLDNUM.zip
echo.


echo *******************************************************************
echo Splitting final zipfile on ussm-cpd\build_environments...
echo *******************************************************************
echo.
delay %DELAYTIME

cdd h:\build_environments\navconsumer_%PRODVERSION%\%BLDNUM
iff not exist %ZIPFILE_FINAL%_%BLDNUM.zip then
  echo.
  echo %ZIPFILE_FINAL%_%BLDNUM.zip not found.
  echo.
  set ERRORMSG=CMERROR %ZIPFILE_FINAL%_%BLDNUM.zip not found after copy to build_environments. Check CM build script.
  goto /i errmsg
endiff

echo Splitting...
echo.
echo @call split2 %ZIPFILE_FINAL%_%BLDNUM.zip 100
@call split2 %ZIPFILE_FINAL%_%BLDNUM.zip 100

echo cdd %BUILD_DRIVE%%INIT_DIR
cdd %BUILD_DRIVE%%INIT_DIR
echo.

echo Delete temporary final archive file.
echo del %BUILD_DRIVE%\archives\%ZIPFILE_FINAL%_%BLDNUM.zip
del %BUILD_DRIVE%\archives\%ZIPFILE_FINAL%_%BLDNUM.zip
delay %DELAYTIME
echo.

goto bld_success

%TERMINATIONCMD


:ERRMSG

: CD back to the INIT_DIR

echo cd %INIT_DIR
cd %INIT_DIR
echo.

rem
rem Restore the original path.
rem
gosub env_restore
 
iff "%ERRORMSG" = "" then
  echo.
  echo ERRORMSG was not previously set.  Setting to unknown error in build.
  set ERRORMSG=CMERROR ERRORMSG was not previously set. Unknown error in build. Check CM build script.
  
endiff

echo.
echo.
echo Error in build.
echo.
echo MSG = %ERRORMSG
echo.
echo.
delay %DELAYTIME

echo.
echo ***********************************************
echo Sending out build failure email... 
echo ***********************************************
echo.
delay %DELAYTIME


echo.
echo *****************************************************
echo Generating text for build failed email...
echo *****************************************************
echo.

TEXT > %INIT_DIR\failmessage.txt
Team,


!prod_name! CM Build #!buildnumber! has encountered an error:


!BUILD_ERROR_MESSAGE!

The log file can be found on ussm-cpd at:
  \Unreleased_Builds\NAV\r14.2\!logs\!buildnumber!

If this is a problem that the development team can help with, please take a look at it
and give me a call or send me an email if you have further information on it.

If this is a CMERROR or OTHERERROR message, I'll check it out and re-start the build.


Thanks...


   -!BUILDER_SHORT!
___________________________________________________________________
     !BUILDER!, Configuration Management
     
ENDTEXT

echo.
echo *****************************************************
echo Using Python to modify the text...
echo *****************************************************
echo.
delay %DELAYTIME

@call python r:\cm\sr.py %INIT_DIR\failmessage.txt "!buildnumber!" "%BLDNUM"
@call python r:\cm\sr.py %INIT_DIR\failmessage.txt "!prod_name!" "%PRODNAME"
@call python r:\cm\sr.py %INIT_DIR\failmessage.txt "!BUILD_ERROR_MESSAGE!" "%ERRORMSG"
@call python r:\cm\sr.py %INIT_DIR\failmessage.txt "!BUILDER!" "%BUILDER%"
@call python r:\cm\sr.py %INIT_DIR\failmessage.txt "!BUILDER_SHORT!" "%BUILDER_SHORT%"

:postlog

if not exist c:%LOGNAME goto addlog
echo.
echo *****************************************************
echo Post log to server...
echo *****************************************************
echo.
echo Posting log file...
delay %DELAYTIME
echo.
echo Creating directory...
echo.

if not isdir h:\Unreleased_Builds\NAV\r14.2\!logs\%BLDNUM md /s h:\Unreleased_Builds\NAV\r14.2\!logs\%BLDNUM
echo.
echo Copying log...
delay %DELAYTIME
copy c:%LOGNAME h:\Unreleased_Builds\NAV\r14.2\!logs\%BLDNUM\navconsumer_%_HOUR%%_MINUTE%.log

:addlog
echo.
echo **************************************************************
echo Appending log to email, if there are error strings in it.
echo **************************************************************
echo.
delay %DELAYTIME

iff %@filesize[%INIT_DIR\%FOUND_ERRS%] gt 0 then
  echo There are error strings in the log file.
  echo.
  echo Adding error strings to end of email message text...
  echo.
  delay %DELAYTIME
  cat %INIT_DIR\%FOUND_ERRS% >> %INIT_DIR\failmessage.txt
endiff

rem remove any evidence of digisign password from the fail email...
rem put this inside the above iff stmt after the cat statement
rem if there is a digisign password.
rem @call python r:\cm\sr.py %INIT_DIR\failmessage.txt "%2" "XXXXXXXX"

echo.
echo *****************************************************
echo Sending out build failed email...
echo *****************************************************
echo.
delay %DELAYTIME

call python r:\cm\sendmail.py %INIT_DIR\breaklist.txt "CM Build Notification: %PRODNAME Build %BLDNUM has Errors" %INIT_DIR\failmessage.txt /q /s
delay %DELAYTIME

echo.
echo ********************************************************
echo Making database entry for bad build...
echo ********************************************************
echo.
delay %DELAYTIME

echo.
echo ********************************************************
echo Setting finish time for bad build...
echo ********************************************************
echo.
delay %DELAYTIME

echo cd %INIT_DIR
cd %INIT_DIR

call gettime finish

iff "%TESTMODE" eq "yes" then
  echo.
  echo TESTMODE:  Skipping database entry...
  echo.
  delay %DELAYTIME
  goto /i bldfailmsg
endiff


:bldfailmsg
echo.
echo ***************************************************************
echo.
echo ERROR:  Build Failed.
echo.
echo   Reason:  %ERRORMSG
echo.
echo ***************************************************************
echo.
delay %DELAYTIME

set EXIT_CODE=1
goto DONE

:BLD_SUCCESS

%BUILD_DRIVE

iff "%CMCERTIFIED" eq "no" then
  echo.
  echo DEVBUILD:  Skipping label lock...
  echo.
  delay %DELAYTIME
  goto /i restoreenv
endiff

iff "%TESTMODE" eq "yes" then
  echo.
  echo TESTMODE:  Skipping label lock.
  echo.
else 
  echo.
  echo ***************************************************************
  echo Locking label %LABELBASE.%BLDNUM...
  echo ***************************************************************
  echo.
  delay %DELAYTIME
  echo Label:	%LABELBASE.%BLDNUM > new.lab
  echo Description:  Automatic CM Build of %LABELBASE.%BLDNUM >> new.lab
  echo Options: locked >> new.lab
  echo View:       //depot/...>> new.lab
  call p4 label -i < new.lab
  echo.
  if exist temp.lab del temp.lab
  if exist new.lab del new.lab
endiff

:restoreenv
rem
rem Restore the original path.
rem
echo.
gosub env_restore

echo Deleting old archive flag...
echo.
echo ***************************************************************
echo Deleting old archive flag    (Build # - 3)...
echo ***************************************************************
echo.
delay %DELAYTIME
echo.

if exist j:\Archive_Flags\%ARCHIVEFLAGBASE%_%@EVAL[%BLDNUM-3].txt del /z j:\Archive_Flags\%ARCHIVEFLAGBASE%_%@EVAL[%BLDNUM-3].txt
delay %DELAYTIME

echo.
echo *****************************************************
echo Generating text for build complete email...
echo *****************************************************
echo.
delay %DELAYTIME

TEXT > %INIT_DIR\endsuccess.txt
Team,

!prod_name! CM Build #!buildnumber! is fully complete and archived.
Metrics have been posted as well at the following location(s):

\\ussm-cpd:

\Unreleased_Builds\NAV\r14.2\!buildnumber!\metrics

Please use your Symcorp account to access this server.


Please let me know if there are any problems with the build.


   -!BUILDER_SHORT!
___________________________________________________________________
     !BUILDER!, Configuration Management

ENDTEXT


@call python r:\cm\sr.py %INIT_DIR\endsuccess.txt "!buildnumber!" "%BLDNUM"
@call python r:\cm\sr.py %INIT_DIR\endsuccess.txt "!prod_name!" "%PRODNAME"
@call python r:\cm\sr.py %INIT_DIR\endsuccess.txt "!BUILDER!" "%BUILDER%"
@call python r:\cm\sr.py %INIT_DIR\endsuccess.txt "!BUILDER_SHORT!" "%BUILDER_SHORT%"

echo.
echo *****************************************************
echo Sending out build complete email...
echo *****************************************************
echo.
delay %DELAYTIME

echo call python r:\cm\sendmail.py %INIT_DIR\%MAILLISTFILE "CM Build Notification: %PRODNAME Build %BLDNUM is complete" %INIT_DIR\endsuccess.txt /q /s
call python r:\cm\sendmail.py %INIT_DIR\%MAILLISTFILE "CM Build Notification: %PRODNAME Build %BLDNUM is complete" %INIT_DIR\endsuccess.txt /q /s

echo.
echo ********************************************************
echo Making database entry for good build...
echo ********************************************************
echo.
delay %DELAYTIME

echo.
echo ********************************************************
echo Setting finish time...
echo ********************************************************
echo.
delay %DELAYTIME

echo cd %INIT_DIR
cd %INIT_DIR

call gettime finish

iff "%TESTMODE" eq "yes" then
  echo.
  echo TESTMODE:  Skipping database entry...
  echo.
  delay %DELAYTIME
  goto /i spacecalc
endiff

:spacecalc
rem *******************************************************************
rem   Space calculations
rem *******************************************************************

set SPACEAFTERBUILD=%@diskfree[%BUILD_DRIVE%,m]
set SPACEUSEDCURR=%@EVAL[%SPACEAFTERDELETE%-%SPACEAFTERBUILD%]

echo Space freed by delete of previous BE:     %SPACEFREEDUP
echo Space used by current build # %BLDNUM:        %SPACEUSEDCURR

goto done

rem *******************************************************************
rem     Subroutines
rem *******************************************************************

:lookatlogs
echo.
echo Looking...
echo.
delay %DELAYTIME

iff exist %INIT_DIR\%FOUND_ERRS% then
  echo Deleting previous %INIT_DIR\%FOUND_ERRS%...
  del %INIT_DIR\%FOUND_ERRS%
  echo.
endiff  

: echo out all strings that say error

echo.
echo *******************
echo Project summary
echo *******************
echo.

r:\cm\grep.exe -i "error(s)" %LOGNAME
echo.

: Now, grab all the actual error strings and put them in the %INIT_DIR\%FOUND_ERRS% file.

echo Grabbing valid error strings...
echo.

rem "[^0] error(s)" doesn't work because there are some non-error strings like that.

r:\cm\grep.exe -i "[1-9] error(s)" %LOGNAME > %INIT_DIR\%FOUND_ERRS%
r:\cm\grep.exe -i "10 error(s)" %LOGNAME >> %INIT_DIR\%FOUND_ERRS%
r:\cm\grep.exe -i "20 error(s)" %LOGNAME >> %INIT_DIR\%FOUND_ERRS%
r:\cm\grep.exe -i "30 error(s)" %LOGNAME >> %INIT_DIR\%FOUND_ERRS%
r:\cm\grep.exe -i "40 error(s)" %LOGNAME >> %INIT_DIR\%FOUND_ERRS%
r:\cm\grep.exe -i "50 error(s)" %LOGNAME >> %INIT_DIR\%FOUND_ERRS%
r:\cm\grep.exe -i "60 error(s)" %LOGNAME >> %INIT_DIR\%FOUND_ERRS%
r:\cm\grep.exe -i "70 error(s)" %LOGNAME >> %INIT_DIR\%FOUND_ERRS%
r:\cm\grep.exe -i "80 error(s)" %LOGNAME >> %INIT_DIR\%FOUND_ERRS%
r:\cm\grep.exe -i "90 error(s)" %LOGNAME >> %INIT_DIR\%FOUND_ERRS%
r:\cm\grep.exe "Error:" %LOGNAME >> %INIT_DIR\%FOUND_ERRS%
r:\cm\grep.exe -i "fatal error" %LOGNAME >> %INIT_DIR\%FOUND_ERRS%
r:\cm\grep.exe -i "syntax error" %LOGNAME >> %INIT_DIR\%FOUND_ERRS%
r:\cm\grep.exe -i "*** ERROR(S) IN BUILD!! ***" %LOGNAME >> %INIT_DIR\%FOUND_ERRS%
r:\cm\grep.exe -i "Error:  The license data could not be loaded from the server" %LOGNAME >> %INIT_DIR\%FOUND_ERRS%
r:\cm\grep.exe -i "The wrapping process failed" %LOGNAME >> %INIT_DIR\%FOUND_ERRS%

echo.

iff %@filesize[%INIT_DIR\%FOUND_ERRS%] gt 0 then
  echo "Errors were found..."
  delay %DELAYTIME
  cat %INIT_DIR\%FOUND_ERRS%
  echo.
endiff  

return

:makelabel
echo.
echo ***************************************************************
echo Creating Perforce label %LABELBASE.%BLDNUM...
echo ***************************************************************
echo.
p4 label -o %LABELBASE.%BLDNUM > temp.lab
p4 label -i < temp.lab
del temp.lab
echo.
echo.
echo ***************************************************************
echo Syncing label %LABELBASE.%BLDNUM...
echo ***************************************************************
echo.
delay %DELAYTIME
echo p4 labelsync -l %LABELBASE.%BLDNUM
echo.
delay %DELAYTIME
p4 labelsync -l %LABELBASE.%BLDNUM > %INIT_DIR\labelsync.txt
echo.
delay %DELAYTIME
echo Done.
echo.
return

rem *********************************
rem   env_save
rem *********************************

:-------------------------------------------------------------------------
: Save Environment Variables
:-------------------------------------------------------------------------
:env_save
echo Saving path, lib, and include variables...
echo.
delay %DELAYTIME
set orig_path=%path%
set orig_lib=%lib%
set orig_include=%include%
echo.
echo Saved path, lib, include variables.
echo.
delay %DELAYTIME
return


rem *********************************
rem   env_restore
rem *********************************

:-------------------------------------------------------------------------
: Restore Environment Variables
:-------------------------------------------------------------------------
:env_restore
echo Restoring path, lib, and include...
echo.
delay %DELAYTIME
set path=%orig_path%
set lib=%orig_lib%
set include=%orig_include%
echo.
echo Restored path, lib, include.
echo.
delay %DELAYTIME
return

:CREATE_INSERT_ERROR
echo.
echo There was a database insert error.  Please notify the CM Database administrator.
echo.
%TERMINATIONCMD 

:PERFORM_INSERT_ERROR
echo.
echo There was a database insert error.  Please notify the CM Database administrator.
echo.
%TERMINATIONCMD 

:usage
echo.
echo %0 starts the automated %PRODNAME build
echo.
echo This script is to be run by CM personnel only.
echo.
echo Usage:
echo.
echo %0 build_num
echo.
echo build_num is required.
echo.
echo Example:
echo            %0 15
echo.
echo            starts build # 15.
echo.
echo.
%TERMINATIONCMD 

:DONE

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: Variables for BuildNotes.html posting
::
:: Note: This is done here since build notes are generated
:: after the build is posted.This should be cleaned up in
:: the future
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

set BUILDNOTES=//depot/Norton_AntiVirus/Consumer/trunk/src/cm/BuildNotes/BuildNotes.html
set BUILDNOTES_DIR=C:\bld_area\navcon_r14.2\nav\src\cm\BuildNotes
set BUILDNOTES_FILE=BuildNotes.html
set BUILDNOTES_POST=h:\Unreleased_Builds\NAV\r14.2\%BLDNUM%\

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: Post build notes to the USSM-CPD server
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

set P4CLIENT=navconsumer_r14.2_cm_client

p4 sync -f %BUILDNOTES%

copy /Y %BUILDNOTES_DIR%\%BUILDNOTES_FILE% %BUILDNOTES_POST%\%BUILDNOTES_FILE%

echo.
echo **************************************
echo Build is complete.
echo Creating 'complete.txt' on USSM-CPD.
echo **************************************
echo.

echo Complete > %POSTINGSERVER%\Unreleased_Builds\NAV\%PRODVERSION%\%BLDNUM%\complete.txt

iff not exist "%POSTINGSERVER%\Unreleased_Builds\NAV\%PRODVERSION%\%BLDNUM%\complete.txt" then
    echo complete.txt was not found on ussm-cpd. Attempting to create again
    echo.
    echo Complete > %POSTINGSERVER%\Unreleased_Builds\NAV\%PRODVERSION%\%BLDNUM%\complete.txt
else
    echo Complete.txt written. The build is complete!
endiff

echo.
echo ************************************************************
echo Automated build script for %PRODNAME is complete.
echo ************************************************************
echo.
echo.
echo Build started:     %bld_start_time%
echo Build finished:    %bld_finish_time%

%TERMINATIONCMD %EXIT_CODE

