////////////////////////
//
// PROPRIETARY / CONFIDENTIAL.
// Use of this product is subject to license terms.
// Copyright © 2006 Symantec Corporation.
// All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////////////////////////

// ReloadEventSubscriber.h : header file
//
#pragma once

#include "ccEventManagerHelper.h"
#include "ccSubscriberHelper.h"
#include "ccThread.h"

#include "SymProtectEventsLoader.h"
#include "SymProtectEventsInterface.h"

#include <queue>

// Callback interface
class ISymProtectPolicyEventCallback
{
public:
    // This function will be called when a policy event is generated by
    // SymProtect
    virtual void HandleSymProtectEvent(const SymProtectEvt::CPolicyEventEx* const pEvent) = 0;
};

class CSymProtectPolicyEventSubscriber : ccEvtMgr::CSubscriberHelper
{
public:
    CSymProtectPolicyEventSubscriber();
    virtual ~CSymProtectPolicyEventSubscriber();

public:
    bool Create(ISymProtectPolicyEventCallback& EventCB);
    void Destroy();

private:
    CSymProtectPolicyEventSubscriber(const CSymProtectPolicyEventSubscriber&);
    CSymProtectPolicyEventSubscriber& operator=(const CSymProtectPolicyEventSubscriber&);

    // CSubscriberEx implementation
public:
    ccEvtMgr::CError::ErrorType OnEvent(long nSubscriberId, 
                                        const ccEvtMgr::CEventEx& Event,
                                        EventAction& eAction);
    ccEvtMgr::CError::ErrorType OnShutdown();

private:
    ccLib::CEvent             m_NotifyEvent;
    ccLib::CCriticalSection   m_csEventQueue;
    std::queue<SymProtectEvt::CPolicyEventExPtr> m_queueEvents;

    ccEvtMgr::CProxyFactoryExPtr    m_pProxyFactory;
    ccEvtMgr::CEventFactoryEx2Ptr   m_pEventFactory;
    SymProtectEvt::SymProtectEvents_CEventFactoryEx2  m_EventFactoryLoader;
    SymProtectEvt::SymProtectEvents_CProxyFactoryEx   m_ProxyFactoryLoader;
    CSymStaticRefCount<ccEvtMgr::CEventManagerHelper> m_EventManagerHelper;

    // Work thread and related events
    class PolicyEventThread : public ccLib::CThread
    {
    public:
        PolicyEventThread(CSymProtectPolicyEventSubscriber& Subscriber);
        BOOL Create(ISymProtectPolicyEventCallback* pCallback);
        int Run();
        void PostTerminate();

        // Hide the "normal" Create function
    private:
        BOOL Create(LPSECURITY_ATTRIBUTES pSecurityAttrs,
                    DWORD dwStackSize,
                    DWORD dwCreateFlags);

    private:
        ISymProtectPolicyEventCallback* m_pEventCB;

        CSymProtectPolicyEventSubscriber& m_Subscriber;
        ccLib::CCriticalSection&  m_csEventQueue;
        std::queue<SymProtectEvt::CPolicyEventExPtr>& m_queueEvents;
        ccLib::CEvent m_ShutdownEvent;
        ccLib::CEvent& m_NotifyEvent;
    } m_WorkThread;
};
