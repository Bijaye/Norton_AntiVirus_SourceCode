####################################################################
#                                                                  #
# Program name:  Crumbs.pm                                         #
#                                                                  #
# Package name:  AVIS::Crumbs.pm                                   #
#                                                                  #
# Description:   Read and write attributes file to and from        #
#                a hash.                                           #
#                                                                  #
# Statement:     Licensed Materials - Property of IBM              #
#                (c) Copyright IBM Corp. 1999                      #
#                                                                  #
# Author:        Morton Swimmer                                    #
#                                                                  #
# Silliness:     U.S. Government Users Restricted Rights - use,    #
#                duplication or disclosure restricted by GSA ADP   #
#                Schedule Contract with IBM Corp.                  #
#                                                                  #
#                                                                  #
####################################################################
#                                                                  #
# Function:                                                        #
#                                                                  #
#                                                                  #
#                                                                  #
####################################################################
package AVIS::Crumbs;
require Exporter;
use AVIS::Local;
use Data::Dumper;

@ISA = qw(Exporter);
@EXPORT = ();
@EXPORT_OK = qw(read write);
$VERSION = '1.0';

use strict;

1;

sub read ($$) {
  my ($unc, $cookie) = @_;

  my ($d, $catts, $rc);
  open IN, "<$unc/$isfnAttributes" or return ();
  $rc = read IN, $d, 32000;
  close IN;
      eval $d;
      return %$catts;
}

sub write ($@) {
  my ($unc) = shift;
  my ($cookie) = shift;
  my (%h) = @_;

  my $d;
  $d = Data::Dumper->new([\%h], [qw(catts)]);
  $d->Purity(0);
  $d->Useqq(1);
  open OUT, ">$unc/$isfnAttributes" or return 0;
  print OUT $d->Dump;
  close OUT;
  return 1;
}

__END__


=head1 NAME

AVIS::Crumbs -- Read and write attributes file to and from a hash.  

=head1 SYNOPSIS

use AVIS::Crumbs;
my %AttribHash;
$AttribHash{GuruName} = "Mathilda"; 
$AttribHash{NormalScanName} = "Martina";
$AttribHash{c} = 3;
AVIS::Crumbs::write($unc, $cookie, %AttribHash);
my %c;
%c = AVIS::Crumbs::read($unc, $cookie);


=head1 DESCRIPTION

=over 2

=item %attributes = read($unc, $cookie)

read reads the attributes from the file and returns the hash
%attributes. It is currently based on data dumper, so more than one
variable could have been defined. However I've only defined one
variable: a hash of the attributes of the cookie. Some of the
attributes are hashes themselves or arrays, but normally are just
strings or integers.

Returns an empty hash on error.

=item write($unc, $cookes, %attributes)

write writes the attributes in the hash %attributes to file.

Returns false (0) on error.

=item attributes

Use only agreed on attibute keys. 

Data collected from the communications subsystem or the classifier:

  CaptureName     - Name of the file by which it was captured, and 
                    thus resides in the samples directory. (string)
  NameList        - Hash of hashes generated by Autoname::GetRawNames. 
                    (hash of hashes of strings and are used like:
                    $h{first}{second})
  VirusName       - The resulting name created by the autoname facility
                    (Autoname::CraftNewName). (string)
  GuruName        - Name given by expert user in advance of analysis.
                    (string)
  NormalScanName  - name from AV in 'normal' scan mode (ie, with 
                    verification). (string)
  RelaxedScanName - name from AV in more relaxed scan mode, ie 
                    with results from relaxed string matching 
                    or heuristics. (string)
  WasDetected     - Virus was detected by AV. (0 or 1)
  WasVerified     - Virus was verified but not repaired. (0 or 1)
  WasRepaired     - Virus was repaired. So why do we need this? See 
                    IncompleteRep. (0 or 1)
  IncompleteRep   - Indicates in the case of a macro virus, that repair
                    was incomplete and the virus needs further analysis.
                    (undef, 0 or 1; undef if not relevant)
  Mode            - Operation mode for this cookie: "normal" - normal
                    mode, "expert" - package stuff for experts, "test" -
                    use alternative set of signatures specified in 
                    TestDefSet, "demo" - use nearly empty def set.
                    (string)
  TestDefSet      - Specifies which set of the tester definition 
                    files to use. (integer or undef if not test mode)
  FileTypes       - hash of bool from TypeMgr indicating which file types
                    are identified with this file. OLE2 DocFiles can be
                    multiple. (hash of 0 or 1)

Data collected in the analyze stage:

  IsInfected      - We verified that the virus infects, so the original
                    sample was infective. (0 or 1)
  IsDetected      - We now believe we detect this virus. This will be
                    used in unit testing. (0 or 1)
  IsVerified      - We now believe we verify this virus. This will be
                    used in unit testing. (0 or 1)
  IsRepaired      - We now believe we repait this virus. This will be
                    used in unit testing. (0 or 1)
  IsPolymorph     - We verified that the virus is a polymorphic virus 
                    (0 or 1)
  Type            - Type of virus found. (string: possible values are
                    "binary file infector", "binary bootsector infector",
                    "Word infector", ...)
  Attributes      - Hash of virus attributes. For binary viruses use
                    keys: Samples, Sectors, Size, COM, EXE, RES, MBR,
                    BOO, FFind, HFind, XOpen, Open, HLL. (hash of 
                    integers)
                    Look at Vides.results for examples of data.


This file is also used to create the readme file later in the analysis
phase.

=head1 HISTORY

  MS 19981215     - Initial offering.
  MS 19981216     - Added Useqq(1) upon Dave's request.

=head1 BUGS

There is no support for concurrrent access to the attributes. The
results will be unpredicable if more than zero functional blocks write
to the file while more than zero read. 

=head1 AUTHOR

Morton Swimmer, swimmer@us.ibm.com

=head1 SEE ALSO

perl(1).

=cut






