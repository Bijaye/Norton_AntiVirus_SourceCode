/////////////////////////////////////////////////////////////////////
// HelpDlg.cpp : implementation file
//
// Copyright 1992-1997 Symantec, Peter Norton Product Group
//////////////////////////////////////////////////////////////////////////////////
// $Header:
//
// Description:
//              class CHelpDialog
//      This class will handle "What's This?", "How To", and "InfoDesk"
//      help commands for a dialog.  The main Alert Options dialog is derived
//      from this class.
//
//////////////////////////////////////////////////////////////////////////////////
//
// $Log:
// HLPropPg.cpp : implementation file
//
//////////////////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "alrtres.h"
#include "AlertUI.h"
#include "HelpDlg.h"
#include "ngui.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
//
// CHelpDialog dialog
//
/////////////////////////////////////////////////////////////////////////////

CHelpDialog::CHelpDialog(UINT  nIDTemplate, CWnd*  pParent /*=NULL*/)
    : CDialog(nIDTemplate, pParent) ,m_pHelpHowToMap(NULL)
                                    ,m_pHelpWhatsThisMap(NULL)
                                    ,m_pHelpWhatsThisGrayMap(NULL)
                                    ,m_pCurrentContextWnd(NULL)
                                    ,m_uiMenuIndex((UINT)-1)
{
        Initialize();
}



void CHelpDialog::Initialize()
{
        //{{AFX_DATA_INIT(CHelpDialog)
                // NOTE: the ClassWizard will add member initialization here
        //}}AFX_DATA_INIT

}



CHelpDialog::~CHelpDialog()
{
}



void CHelpDialog::DoDataExchange(CDataExchange* pDX)
{
    CDialog::DoDataExchange(pDX);
        //{{AFX_DATA_MAP(CHelpDialog)
                // NOTE: the ClassWizard will add DDX and DDV calls here
        //}}AFX_DATA_MAP
}



BEGIN_MESSAGE_MAP(CHelpDialog, CDialog)
        //{{AFX_MSG_MAP(CHelpDialog)
        ON_WM_CONTEXTMENU()
    ON_MESSAGE(WM_HELP, OnHelpMessage)
        ON_WM_HELPINFO()
        ON_COMMAND(IDR_INFODESK, OnHelpInfoDesk)
        ON_COMMAND(IDR_WHATS_THIS, OnWhatsThis)
        //}}AFX_MSG_MAP
END_MESSAGE_MAP()





/////////////////////////////////////////////////////////////////////////////
//
// CHelpDialog message handlers
//
/////////////////////////////////////////////////////////////////////////////



// ==== MainDlgWhatsThisHelp ==============================================
//
// This is a virtual function which checks whether there is a "what's this"
// help file for a given control ID.  Any class derived from CHelpDlg which
// needs to check this should provide their own version of this function.
//
// ========================================================================

BOOL    CHelpDialog::MainDlgWhatsThisHelp(int ID)
{
    auto    BOOL        result;
    auto    LPDWORD     lpdwWT;

    result = FALSE;
    lpdwWT = m_pHelpWhatsThisMap;
        while(*lpdwWT != (DWORD)0)
        {
                if(*lpdwWT == (DWORD)ID)
            {
            result = TRUE;
            break;
            }
                lpdwWT += 2;
        }

    return (result);

}  // end of "CHelpDialog::MainDlgWhatsThisHelp"



// ==== OnCommand =========================================================
//
//  This function goes through the "How To" map to see if a command is in
//  the map - if so, we display the "How To" popup
//
// ========================================================================

BOOL    CHelpDialog::OnCommand(WPARAM wParam, LPARAM lParam)
{
        // TODO: Add your specialized code here and/or call the base class

    auto    CString     sHelpFileName;
    auto    HWND        hWnd = NULL;
    auto    UINT        nID = LOWORD(wParam);

        if (m_pHelpHowToMap != NULL)
        {
        // enum through the how to command ID's to see if we have to act
        // on any of them
        auto    LPDWORD lpCmdID = m_pHelpHowToMap;
                while (( *lpCmdID != nID ) && ( *lpCmdID != 0 ))
            {
            // increment to the next CMD ID
            lpCmdID += 2;
            }

        // if we found a match, launch the appropriate help file
                if ( *lpCmdID == nID && *lpCmdID != 0)
            {
            auto    LPDWORD     lpHowToHelp = lpCmdID + 1;
            sHelpFileName  = NAV_HELPFILENAME;

            // if the message wasn't generated by the help button, then
            // append the task keyword
            if (ID_HELP != nID)
                {
                sHelpFileName += " >TASK";
                }

            ::WinHelp( AfxGetMainWnd()->GetSafeHwnd(), sHelpFileName
                                                        , HELP_CONTEXT
                                                        , *lpHowToHelp );
                        return TRUE;
            }
        }

    // if the info desk menu item was selected, call the corresponding function
    // NOTE: shouldn't the message map take care of this?
    // if ((0 == HIWORD(wParam))  &&  (IDR_INFODESK == LOWORD(wParam)))
        // {
        // OnHelpInfoDesk();
        // }

    return CDialog::OnCommand(wParam, lParam);

} // end of "CHelpDialog::OnCommand"



// ==== OnContextMenu =====================================================
//
//
// ========================================================================

void    CHelpDialog::OnContextMenu(CWnd* pWnd, CPoint point)
{
        // TODO: Add your message handler code here

    auto    CMenu       HowToMenu;
    auto    CMenu       menu;
    auto    CMenu*      pPopup = NULL;

        m_pCurrentContextWnd = pWnd;
    if (menu.LoadMenu(IDR_CONTEXT_HELP_MENU))
        {
        auto    CMenu*  pHowToMenu  = menu.GetSubMenu(m_uiMenuIndex);
        auto    CString csTemp;

        pPopup = menu.GetSubMenu(0);
        csTemp.LoadString(IDS_HOW_TO);
        pPopup->DeleteMenu(2, MF_BYPOSITION);
//        pPopup->InsertMenu(2, MF_BYPOSITION | MF_POPUP | MF_STRING
//                                , (UINT)pHowToMenu->GetSafeHmenu(),csTemp);

        // delete "What's this" if we're not on a control
                if (pWnd == this)
                        {
            // this is necessary because if you right-click when in help mode,
            // the coordinates of point will not be the mouse position - so
            // they need to be reset
            auto    DWORD   dwPt = GetMessagePos();
            point.x = LOWORD(dwPt);
            point.y = HIWORD(dwPt);

            auto    CPoint  pt = point;
            ScreenToClient( &pt );

            // need to make this second check so that we won't delete the
            // menu if we're on a grayed control or a text field
            pWnd = ChildWindowFromPoint(pt, CWP_SKIPINVISIBLE);
            if ((pWnd == this) || (0 == pWnd))
                {
                // delete "What's This" and separator
                pPopup->DeleteMenu(0,MF_BYPOSITION);
                pPopup->DeleteMenu(0,MF_BYPOSITION);
                pWnd = this;
                }
            else
                {
                m_pCurrentContextWnd = pWnd;
                }
            }

        // needed for the case where user hit 'Shift-F1' while a control
        // was highlited - without this, the menu will show up at (-1,-1)
        else
            {
            if ((-1 == point.x) && (-1 == point.y))
                {
                if (pWnd != 0)
                    {
                    auto    CRect   tempRect;
                    pWnd->GetWindowRect(&tempRect);
                    point.x = tempRect.left + 2;
                    point.y = tempRect.top + 2;
                    }
                else
                    {
                    // don't show menu
                    return;
                    }
                }
            }

        // if there is no "What's This" help for the given control, delete
        // the "What's This" menu
        if (pWnd != 0)
            {
            auto    int     iCtrlID = pWnd->GetDlgCtrlID();
            if (iCtrlID != 0)
                {
                if (0 == MainDlgWhatsThisHelp(iCtrlID))
                    {
                    // delete "What's This" and separator
                    pPopup->DeleteMenu(0,MF_BYPOSITION);
                    pPopup->DeleteMenu(0,MF_BYPOSITION);
                    m_pCurrentContextWnd = this;
                    }
                }
            }
        }

    ASSERT(pPopup != NULL);
        if(pPopup != NULL)
        {
        pPopup->TrackPopupMenu(TPM_LEFTALIGN | TPM_RIGHTBUTTON
                                                , point.x, point.y, this);
        }

}   // end of "CHelpDialog::OnContextMenu"



// ==== OnHelpInfo ========================================================
//
//
// ========================================================================

BOOL    CHelpDialog::OnHelpInfo(HELPINFO* pHelpInfo)
{
        // TODO: Add your message handler code here and/or call default

        OnWhatsThis();
    return CDialog::OnHelpInfo(pHelpInfo);

} // end of "CHelpDialog::OnHelpInfo"



// ==== OnHelpInfoDesk ====================================================
//
//
// ========================================================================

void    CHelpDialog::OnHelpInfoDesk(void)
{
    ::WinHelp(AfxGetMainWnd()->GetSafeHwnd(), NAV_HELPFILENAME
                                                        , HELP_FINDER, 0);

} // end of "CHelpDialog::OnHelpInfoDesk"



// ==== OnHelpMessage =====================================================
//
//
// ========================================================================

LRESULT CHelpDialog::OnHelpMessage(WPARAM  wParam, LPARAM  lParam)
{
    ASSERT(m_pHelpWhatsThisMap != NULL);
    ASSERT(m_pHelpHowToMap != NULL);
        wParam = wParam;

    auto    LPHELPINFO      pHelpInfo = (LPHELPINFO)lParam;
    auto    LPVOID          lpMap = (LPVOID)m_pHelpWhatsThisMap;

    // check if a help file exists for this ID
    if (MainDlgWhatsThisHelp(pHelpInfo->iCtrlId))
        {
        if (HELPINFO_WINDOW == pHelpInfo->iContextType)
            {
            ::WinHelp((HWND)pHelpInfo->hItemHandle, NAV_HELPFILENAME,
                        HELP_WM_HELP, (DWORD)(LPVOID)lpMap );
            }
        }

        return 0;

} // end of "CHelpDialog::OnHelpMessage"



// ==== OnWhatsThis =======================================================
//
//
// ========================================================================

void    CHelpDialog::OnWhatsThis(void)
{
        // make sure that we have a  valid window handle for the help
    auto    HWND        hWnd = NULL;

    if  ((m_pCurrentContextWnd != NULL)
    &&  ((hWnd = m_pCurrentContextWnd->GetSafeHwnd()) != NULL))
        {
        ::WinHelp((HWND)hWnd, NAV_HELPFILENAME, HELP_WM_HELP
                                    , (DWORD)(LPVOID)m_pHelpWhatsThisMap);
        }

} // end of "CHelpDialog::OnWhatsThis"



// ==== ShutdownHelp ======================================================
//
//
// ========================================================================

void    CHelpDialog::ShutdownHelp(void)
{
    ::WinHelp(AfxGetMainWnd()->GetSafeHwnd(), NAV_HELPFILENAME, HELP_QUIT, 0);

} // end of "CHelpDialog::ShutdownHelp"










/////////////////////////////////////////////////////////////////////////////
//
// CHelpPropertyPage property page
//
/////////////////////////////////////////////////////////////////////////////

IMPLEMENT_DYNCREATE(CHelpPropertyPage, CPropertyPage)

CHelpPropertyPage::CHelpPropertyPage() : CPropertyPage()
,m_pHelpHowToMap(NULL)
,m_pHelpWhatsThisMap(NULL)
,m_pCurrentContextWnd(NULL)
{
        Initialize();
}

CHelpPropertyPage::CHelpPropertyPage(UINT nIDTemplate):CPropertyPage(nIDTemplate)
,m_pHelpHowToMap(NULL)
,m_pHelpWhatsThisMap(NULL)
,m_pCurrentContextWnd(NULL)
,m_uiMenuIndex((UINT)-1)
{
        Initialize();
}


// ==== Initialize ========================================================
//
//
// ========================================================================

void    CHelpPropertyPage::Initialize(void)
{
        //{{AFX_DATA_INIT(CHelpPropertyPage)
                // NOTE: the ClassWizard will add member initialization here
        //}}AFX_DATA_INIT

} // end of "CHelpPropertyPage::Initialize"


CHelpPropertyPage::~CHelpPropertyPage()
{
}

void CHelpPropertyPage::DoDataExchange(CDataExchange* pDX)
{
        CPropertyPage::DoDataExchange(pDX);
        //{{AFX_DATA_MAP(CHelpPropertyPage)
                // NOTE: the ClassWizard will add DDX and DDV calls here
        //}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CHelpPropertyPage, CPropertyPage)
        //{{AFX_MSG_MAP(CHelpPropertyPage)
        ON_WM_CONTEXTMENU()
    ON_MESSAGE(WM_HELP, OnHelpMessage)
        //}}AFX_MSG_MAP
        ON_COMMAND(IDR_INFODESK, OnHelpInfoDesk)
        ON_COMMAND(IDR_WHATS_THIS, OnWhatsThis)
END_MESSAGE_MAP()



/////////////////////////////////////////////////////////////////////////////
//
// CHelpPropertyPage message handlers
//
/////////////////////////////////////////////////////////////////////////////




// ==== HelpTopicExists ===================================================
//
//
// ========================================================================

BOOL CHelpPropertyPage::HelpTopicExists(int  ID)
{
    auto    BOOL        result;
    auto    LPDWORD     lpdwWT;

    result = FALSE;
    lpdwWT = m_pHelpWhatsThisMap;
        while(*lpdwWT != (DWORD)0)
        {
                if(*lpdwWT == (DWORD)ID)
            {
            result = TRUE;
            break;
            }
                lpdwWT += 2;
        }

    return (result);

}  // end of "CHelpPropertyPage::HelpTopicExists"




// ==== OnCommand =========================================================
//
// this is where we go through our how to map and see if the command comming through
// here is one which is in the map.  If it is, then lets fire of the how to help pop up.
//
// ========================================================================

BOOL    CHelpPropertyPage::OnCommand(WPARAM wParam, LPARAM lParam)
{
    auto    CString     sHelpFileName;
    auto    HWND        hWnd = NULL;
    auto    UINT        nID = LOWORD(wParam);

        if (m_pHelpHowToMap != NULL)
        {
        // enum through the how to command ID's to see if we have to act
        // on any of them
        auto    LPDWORD lpCmdID = m_pHelpHowToMap;
        while ((*lpCmdID != nID) && (*lpCmdID != 0))
            {
            // increment to the next CMD ID
            lpCmdID += 2;
            }

        // if we found a match, launch the appropriate help file
        if ((*lpCmdID == nID)  &&  (*lpCmdID != 0))
            {
            auto    LPDWORD     lpHowToHelp = lpCmdID + 1;
            sHelpFileName  = NAV_HELPFILENAME;

            // if the message wasn't generated by the help button, then
            // append the task keyword
            if (ID_HELP != nID)
                {
                sHelpFileName += " >TASK";
                }

            ::WinHelp( AfxGetMainWnd()->GetSafeHwnd(), sHelpFileName
                                                        , HELP_CONTEXT
                                                        , *lpHowToHelp );
                        return TRUE;
            }
        }

    return CPropertyPage::OnCommand(wParam, lParam);

}  // end of "CHelpPropertyPage::OnCommand"



// ==== OnContextMenu =====================================================
//
//
// ========================================================================

void    CHelpPropertyPage::OnContextMenu(CWnd* pWnd, CPoint point)
{
        // TODO: Add your message handler code here

    auto    CMenu       HowToMenu;
    auto    CMenu       menu;
    auto    CMenu*      pPopup = NULL;

        m_pCurrentContextWnd = pWnd;
    if (menu.LoadMenu(IDR_CONTEXT_HELP_MENU))
        {
        auto    CMenu*  pHowToMenu  = menu.GetSubMenu(m_uiMenuIndex);
        auto    CString csTemp;

        pPopup = menu.GetSubMenu(0);
        csTemp.LoadString(IDS_HOW_TO);
        pPopup->DeleteMenu(2, MF_BYPOSITION);
//        pPopup->InsertMenu(2, MF_BYPOSITION | MF_POPUP | MF_STRING
//                                , (UINT)pHowToMenu->GetSafeHmenu(),csTemp);

        // delete "What's this" if we're not on a control
                if (pWnd == this)
                        {
            // this is necessary because if you right-click when in help mode,
            // the coordinates of point will not be the mouse position - so
            // they need to be reset
            auto    DWORD   dwPt = GetMessagePos();
            point.x = LOWORD(dwPt);
            point.y = HIWORD(dwPt);

            auto    CPoint  pt = point;
            ScreenToClient( &pt );

            // need to make this second check so that we won't delete the
            // menu if we're on a grayed control or a text field
            pWnd = ChildWindowFromPoint(pt, CWP_SKIPINVISIBLE);
            if ((pWnd == this) || (0 == pWnd))
                {
                // delete "What's This" and separator
                pPopup->DeleteMenu(0,MF_BYPOSITION);
                pPopup->DeleteMenu(0,MF_BYPOSITION);
                pWnd = this;
                }
            else
                {
                m_pCurrentContextWnd = pWnd;
                }
            }

        // needed for the case where user hit 'Shift-F1' while a control
        // was highlited - without this, the menu will show up at (-1,-1)
        else
            {
            if ((-1 == point.x) && (-1 == point.y))
                {
                if (pWnd != 0)
                    {
                    auto    CRect   tempRect;
                    pWnd->GetWindowRect(&tempRect);
                    point.x = tempRect.left + 2;
                    point.y = tempRect.top + 2;
                    }
                else
                    {
                    // don't show menu
                    return;
                    }
                }
            }

        // if there is no "What's This" help for the given control, delete
        // the "What's This" menu
        if (pWnd != 0)
            {
            auto    int     iCtrlID = pWnd->GetDlgCtrlID();
            if (iCtrlID != 0)
                {
                if (0 == HelpTopicExists(iCtrlID))
                    {
                    // delete "What's This" and separator
                    pPopup->DeleteMenu(0,MF_BYPOSITION);
                    pPopup->DeleteMenu(0,MF_BYPOSITION);
                    m_pCurrentContextWnd = this;
                    }
                }
            }
        }

    ASSERT(pPopup != NULL);
        if(pPopup != NULL)
        {
        pPopup->TrackPopupMenu(TPM_LEFTALIGN | TPM_RIGHTBUTTON
                                                , point.x, point.y, this);
        }

} // end of "CHelpPropertyPage::OnContextMenu"




// ==== OnHelpInfoDesk ====================================================
//
//
// ========================================================================

void    CHelpPropertyPage::OnHelpInfoDesk(void)
{
    ::WinHelp(AfxGetMainWnd()->GetSafeHwnd() ,NAV_HELPFILENAME ,HELP_FINDER, 0);

} // end of "CHelpPropertyPage::OnHelpInfoDesk"



// ==== OnHelpMessage =====================================================
//
//
// ========================================================================

LRESULT CHelpPropertyPage::OnHelpMessage(WPARAM wParam, LPARAM lParam)
{
    ASSERT(m_pHelpWhatsThisMap != NULL);
    ASSERT(m_pHelpHowToMap != NULL);
        wParam = wParam;
    // Handles F1 help
    auto    LPHELPINFO  pHelpInfo = (LPHELPINFO)lParam;

    if  ((HELPINFO_WINDOW == pHelpInfo->iContextType)
    &&  (HelpTopicExists(pHelpInfo->iCtrlId)))
        {
        ::WinHelp((HWND)pHelpInfo->hItemHandle, NAV_HELPFILENAME
                        , HELP_WM_HELP, (DWORD)(LPVOID)m_pHelpWhatsThisMap);
        }

        return 0;

} // end of "CHelpPropertyPage::OnHelpMessage"




// ==== OnWhatsThis =======================================================
//
//
// ========================================================================

void CHelpPropertyPage::OnWhatsThis(void)
{
        // make sure that we have a  valid window handle for the help
    auto    HWND    hWnd = NULL;

    if  ((m_pCurrentContextWnd != NULL)
    &&  ((hWnd = m_pCurrentContextWnd->GetSafeHwnd()) != NULL))
        {
        ::WinHelp((HWND)hWnd, NAV_HELPFILENAME, HELP_WM_HELP
                                    , (DWORD)(LPVOID)m_pHelpWhatsThisMap);
        }

} // end of "CHelpPropertyPage::OnWhatsThis"










/////////////////////////////////////////////////////////////////////////////
//
// CStdHelpDlg dialog
//
/////////////////////////////////////////////////////////////////////////////


CStdHelpDlg::CStdHelpDlg(UINT nIDTemplate, CWnd* pParent /*=NULL*/)
        : CDialog(nIDTemplate, pParent)
,m_pHelpHowToMap(NULL)
,m_pHelpWhatsThisMap(NULL)
,pCurrentContextWnd(NULL)
{
        //{{AFX_DATA_INIT(CStdHelpDlg)
                // NOTE: the ClassWizard will add member initialization here
        //}}AFX_DATA_INIT
}


void CStdHelpDlg::DoDataExchange(CDataExchange* pDX)
{
        CDialog::DoDataExchange(pDX);
        //{{AFX_DATA_MAP(CStdHelpDlg)
                // NOTE: the ClassWizard will add DDX and DDV calls here
        //}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CStdHelpDlg, CDialog)
        //{{AFX_MSG_MAP(CStdHelpDlg)
        ON_WM_CONTEXTMENU()
        ON_MESSAGE(WM_HELP, OnHelpMessage)
        ON_COMMAND(IDR_INFODESK, OnHelpInfoDesk)
        ON_COMMAND(IDR_WHATS_THIS, OnWhatsThis)
        //}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
//
// CStdHelpDlg message handlers
//
/////////////////////////////////////////////////////////////////////////////

void CStdHelpDlg::OnContextMenu(CWnd* pWnd, CPoint point)
{
        // TODO: Add your message handler code here
        pCurrentContextWnd = pWnd;
        BOOL b;
        CMenu   HowToMenu;
    CMenu       menu;
        CMenu*  pPopup = NULL;
    if (menu.LoadMenu( IDM_HELP ) && HowToMenu.LoadMenu(IDR_HOWTO_MENU))
    {
                CString csMenuTitle;
        pPopup          = menu.GetSubMenu(1);
                csMenuTitle.LoadString(IDS_HOW_TO);
                CMenu menuHowToPopUp;
                menuHowToPopUp.CreatePopupMenu();

                pPopup->InsertMenu( 2
                                                                , MF_BYPOSITION|MF_POPUP|MF_STRING
                                                                , (UINT)menuHowToPopUp.GetSafeHmenu()
                                                                ,csMenuTitle );



                // enum through the how to command ID's to see if we have to act on any of them.
                LPDWORD lpCmdID = m_pHelpHowToMap;
                BOOL bFoundSomething = FALSE;
                while( *lpCmdID != 0 /* the end of the map */)
                {
                        if(HowToMenu.GetMenuString(*lpCmdID,csMenuTitle, MF_BYCOMMAND) > 0 )
                        {
                                menuHowToPopUp.AppendMenu(MF_STRING,*lpCmdID,csMenuTitle);
                                bFoundSomething = TRUE;
                        }
                        lpCmdID += 2;  // incriment to the next  CMD ID
                }
                if(!bFoundSomething)
                {
                        b = pPopup->DeleteMenu(2,MF_BYPOSITION);  // get rid of the How To popup if we dont have any how to's
                }

                if ( pWnd == this )
                {
                        CPoint pt = point;
                        ScreenToClient(&pt);
                        pCurrentContextWnd = ChildWindowFromPoint(pt,CWP_SKIPINVISIBLE);
                        WORD wCtrlId;

            if( pCurrentContextWnd )
                wCtrlId = (WORD) pCurrentContextWnd->GetDlgCtrlID();
            else
                wCtrlId = (WORD) IDC_STATIC;

                        if( (pCurrentContextWnd == this) ||
                (wCtrlId == (WORD)IDC_STATIC)  ||
                !HelpTopicExists(wCtrlId)
                )
                        {
                                b = pPopup->DeleteMenu(0,MF_BYPOSITION); // get rid of the what's this if we dont have one
                                b = pPopup->DeleteMenu(0,MF_BYPOSITION); // get rid of the separator
                        }
                        else
                        {
                                //////////////////////////////////////////////
                                //  Check to see if the Control we are on is even in our map
                                //  if not, then get rid of the what's this.
                                bFoundSomething = FALSE;
                                lpCmdID = m_pHelpWhatsThisMap;
                                //++lpCmdID;  // get to the control ID's
                                while( *lpCmdID != 0 /* the end of the map */)
                                {
                                        if(*lpCmdID == wCtrlId)
                                        {
                                                bFoundSomething = TRUE;
                                                break;
                                        }
                                        lpCmdID += 2;  // incriment to the next  CMD ID
                                }
                                if(!bFoundSomething)
                                {
                                        b = pPopup->DeleteMenu(0,MF_BYPOSITION); // get rid of the what's this if we dont have one
                                        b = pPopup->DeleteMenu(0,MF_BYPOSITION); // get rid of the separator
                                }
                        }
                }
        else if(pWnd)
            {
            int ID = pWnd->GetDlgCtrlID();
            if( ID == IDC_STATIC || !HelpTopicExists(ID))
                            {
                                b = pPopup->DeleteMenu(0,MF_BYPOSITION); // get rid of the what's this if we dont have one
                                b = pPopup->DeleteMenu(0,MF_BYPOSITION); // get rid of the separator
                            }
            }

        else if (( point.x == -1 ) && ( point.y == -1 ))
                {
                        CRect r;
                        if ( pWnd )
                        {
                                pWnd->GetWindowRect( &r );
                                point.x = r.left +  r.Width() / 2;
                                point.y = r.top  + r.Height() / 2;
                        }
                        else
                                return;
                }
//#endif

        }
        ASSERT( pPopup != NULL );
        if(pPopup != NULL)
                pPopup->TrackPopupMenu( TPM_LEFTALIGN | TPM_RIGHTBUTTON,
                point.x, point.y, this );

}

BOOL CStdHelpDlg::OnInitDialog()
{
    // NG_SetFontsInDialog (GetSafeHwnd(), 0);
        CDialog::OnInitDialog();

        // TODO: Add extra initialization here

        return TRUE;  // return TRUE unless you set the focus to a control
                      // EXCEPTION: OCX Property Pages should return FALSE
}

afx_msg LRESULT CStdHelpDlg::OnHelpMessage(WPARAM wParam, LPARAM lParam)
{
    ASSERT(m_pHelpWhatsThisMap != NULL);
    ASSERT(m_pHelpHowToMap != NULL);
        wParam = wParam;
    // Handles F1 help
    LPHELPINFO  pHelpInfo = (LPHELPINFO)lParam;

    if (pHelpInfo->iContextType == HELPINFO_WINDOW && HelpTopicExists(pHelpInfo->iCtrlId))
        {
        ::WinHelp((HWND)pHelpInfo->hItemHandle, NAV_HELPFILENAME
                        , HELP_WM_HELP, (DWORD)(LPVOID)m_pHelpWhatsThisMap);

        }

        return 0;
}


BOOL CStdHelpDlg::HelpTopicExists(int ID)
{
        LPDWORD lpdwWT = m_pHelpWhatsThisMap;
        int index = 0;
        while(*lpdwWT != (DWORD)0)
        {
                if(*lpdwWT == (DWORD)ID)
                        return TRUE;
                lpdwWT += 2;
        }
    return(FALSE);

}


BOOL CStdHelpDlg::OnCommand(WPARAM wParam, LPARAM lParam)
{
        // TODO: Add your specialized code here and/or call the base class
        UINT nID = LOWORD(wParam);
        HWND hWnd = NULL;
        CString  sHelpFileName;

        if(             (pCurrentContextWnd != NULL)
                &&      ((hWnd = pCurrentContextWnd->GetSafeHwnd()) != NULL)
          )
        {
                // enum through the how to command ID's to see if we have to act on any of them.
                LPDWORD lpCmdID = m_pHelpHowToMap;
                while (( *lpCmdID != nID ) && ( *lpCmdID != 0 ))
                        lpCmdID += 2;  // incriment to the next  CMD ID


                if ( *lpCmdID == nID && *lpCmdID != 0)
                {
                        LPDWORD lpHowToHelp = lpCmdID + 1;

            sHelpFileName  = NAV_HELPFILENAME;
            sHelpFileName += " >TASK";
            ::WinHelp( hWnd, sHelpFileName, HELP_CONTEXT, *lpHowToHelp );
                        return TRUE;
                }

        }

        return CDialog::OnCommand(wParam, lParam);
}


void CStdHelpDlg::OnHelpInfoDesk()
{
    ::WinHelp(AfxGetMainWnd()->GetSafeHwnd(), NAV_HELPFILENAME, HELP_FINDER, 0);
}

void CStdHelpDlg::OnWhatsThis()
{
        // make sure that we have a  valid window handle for the help
        HWND hWnd = NULL;
        if(             (pCurrentContextWnd != NULL)
                &&      ((hWnd = pCurrentContextWnd->GetSafeHwnd()) != NULL)
                )
        {
        ::WinHelp ((HWND)hWnd, NAV_HELPFILENAME, HELP_WM_HELP
                                    , (DWORD)(LPVOID)m_pHelpWhatsThisMap);
        }
}
