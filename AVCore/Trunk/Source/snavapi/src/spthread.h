#ifndef _SPTHREAD_H
#define _SPTHREAD_H

#include "platform.h"
#include <stdio.h>


///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
#if defined (SYM_WIN32)
	#include <conio.h>
	#include <windows.h>
	#include <process.h>

#elif defined(SYM_UNIX)
	#include <pthread.h>
	#include <unistd.h>
	#include <poll.h>
//	#define Sleep(nMilliseconds)  poll(NULL, 0, nMilliseconds)

#elif defined(SYM_NLM)

#endif


///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
#ifdef SYM_WIN32
	#define SHANDLE DWORD
	#define SMUTEXHANDLE CRITICAL_SECTION
	#define pthread_attr_t DWORD

#elif defined(SYM_UNIX)
	#define SHANDLE pthread_t
	#define SMUTEXHANDLE pthread_mutex_t

#elif defined(SYM_NLM)
	#define SHANDLE         WORD
	#define SMUTEXHANDLE    WORD
    #define pthread_attr_t  WORD

#endif



///////////////////////////////////////////////////////////////////////////////
//
//	Function:
//		void sInitThread()
//
//	Description:
//
//	Parameters:
//
//	Returns:
//		NONE
//
///////////////////////////////////////////////////////////////////////////////
void sInitThread ( pthread_attr_t * pthread_attr );



///////////////////////////////////////////////////////////////////////////////
//
//	Function:
//		void sDestroyThread()
//
//	Description:
//
//	Parameters:
//
//	Returns:
//		NONE
//
///////////////////////////////////////////////////////////////////////////////
void sDestroyThread ( pthread_attr_t * pthread_attr );



///////////////////////////////////////////////////////////////////////////////
//
//	Function:
//		void sCreateThread()
//
//	Description:
//
//	Parameters:
//
//	Returns:
//		SHANDLE
//
///////////////////////////////////////////////////////////////////////////////
SHANDLE sCreateThread ( LPVOID start_address, LPVOID arglist, pthread_attr_t * pthread_attr  );



///////////////////////////////////////////////////////////////////////////////
//
//	Function:
//		void sExitThread()
//
//	Description:
//
//	Parameters:
//
//	Returns:
//		NONE
//
///////////////////////////////////////////////////////////////////////////////
void sExitThread ( void );



///////////////////////////////////////////////////////////////////////////////
//
//	Function:
//		void sCreateMutex()
//
//	Description:
//
//	Parameters:
//
//	Returns:
//		NONE
//
///////////////////////////////////////////////////////////////////////////////
void sCreateMutex ( SMUTEXHANDLE *m_mutex );



///////////////////////////////////////////////////////////////////////////////
//
//	Function:
//		void sReleaseMutex()
//
//	Description:
//
//	Parameters:
//
//	Returns:
//		NONE
//
///////////////////////////////////////////////////////////////////////////////
void sReleaseMutex ( SMUTEXHANDLE *m_mutex );



///////////////////////////////////////////////////////////////////////////////
//
//	Function:
//		void sLockMutex()
//
//	Description:
//
//	Parameters:
//
//	Returns:
//		NONE
//
///////////////////////////////////////////////////////////////////////////////
void sLockMutex ( SMUTEXHANDLE *m_mutex );



///////////////////////////////////////////////////////////////////////////////
//
//	Function:
//		void sUnLockMutex()
//
//	Description:
//
//	Parameters:
//
//	Returns:
//		NONE
//
///////////////////////////////////////////////////////////////////////////////
void sUnLockMutex ( SMUTEXHANDLE *m_mutex );



///////////////////////////////////////////////////////////////////////////////
//
//	Function:
//		void sSleep()
//
//	Description:
//
//	Parameters:
//
//	Returns:
//		NONE
//
///////////////////////////////////////////////////////////////////////////////
void sSleep ( WORD delay );

#endif // _SPTHREAD_H

