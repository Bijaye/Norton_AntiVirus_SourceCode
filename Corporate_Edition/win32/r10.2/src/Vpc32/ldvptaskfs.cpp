// PROPRIETARY/CONFIDENTIAL. Use of this product is subject to license terms.
// Copyright (c) 2005 Symantec Corporation. All rights reserved.
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "ldvptaskfs.h"

/////////////////////////////////////////////////////////////////////////////
// CLDVPTaskFS

IMPLEMENT_DYNCREATE(CLDVPTaskFS, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CLDVPTaskFS properties

CString CLDVPTaskFS::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CLDVPTaskFS::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

BOOL CLDVPTaskFS::GetRecordingSchedule()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CLDVPTaskFS::SetRecordingSchedule(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

BOOL CLDVPTaskFS::GetSkipFirst()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CLDVPTaskFS::SetSkipFirst(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

CString CLDVPTaskFS::GetHelpFilename()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CLDVPTaskFS::SetHelpFilename(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

BOOL CLDVPTaskFS::GetRecording()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CLDVPTaskFS::SetRecording(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

CString CLDVPTaskFS::GetTaskName()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CLDVPTaskFS::SetTaskName(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

CString CLDVPTaskFS::GetTaskDescription()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}

void CLDVPTaskFS::SetTaskDescription(LPCTSTR propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}

CString CLDVPTaskFS::GetTaskDescriptiveName()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CLDVPTaskFS::SetTaskDescriptiveName(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CLDVPTaskFS operations

BOOL CLDVPTaskFS::Deinitialize()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CLDVPTaskFS::EndTask()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CLDVPTaskFS::StartTask(long dwID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		dwID);
	return result;
}

BOOL CLDVPTaskFS::Initialize()
{
	BOOL result;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CLDVPTaskFS::DoModalSchedule(LPCTSTR lpstrSubKey, short iKey)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lpstrSubKey, iKey);
	return result;
}

BOOL CLDVPTaskFS::DoModalConfig(long dwPagemask)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		dwPagemask);
	return result;
}

BOOL CLDVPTaskFS::DeleteTask()
{
	BOOL result;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL );
	return result;
}
