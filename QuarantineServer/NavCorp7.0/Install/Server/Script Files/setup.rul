
////////////////////////////////////////////////////////////////////////////////
//
//  IIIIIII SSSSSS
//    II    SS                          InstallShield (R)
//    II    SSSSSS      (c) 1996-1998, InstallShield Software Corporation
//    II        SS      (c) 1990-1996, InstallShield Corporation
//  IIIIIII SSSSSS                     All Rights Reserved.
//
//
//  This code is generated as a starting setup template.  You should
//  modify it to provide all necessary steps for your setup.
//
//
//    File Name:  Setup.rul
//
//  Description:  InstallShield script
//
//     Comments:  This template script performs a basic setup. With minor
//                modifications, this template can be adapted to create
//                new, customized setups.
//
////////////////////////////////////////////////////////////////////////////////


// Include header files

    #include "sdlang.h"
    #include "sddialog.h"

////////////////////// string defines ////////////////////////////

    #define UNINST_LOGFILE_NAME				"Uninst.isu"
    #define IDB_WALLPAPER_BITMAP			20001
	#define SYMANTEC_INSTALLED_APPS_KEY     "\\Software\\Symantec\\InstalledApps"

//////////////////// installation declarations ///////////////////

// ----- DLL function prototypes -----


    // your DLL function prototypes
	prototype qsinst.QServerInstStartService( STRING );
	prototype qsinst.QServerInstStopService( STRING );
	
	// functions exported from "User32" DLL
	prototype	INT		User32.GetKeyboardType(INT);

// ---- script function prototypes -----

    // generated by the Project Wizard
    prototype ShowDialogs();
    prototype MoveFileData();
    prototype HandleMoveDataError( NUMBER );
    prototype ProcessBeforeDataMove();
    prototype ProcessAfterDataMove();
    prototype SetupRegistry();
    prototype SetupFolders();
    prototype CleanUpInstall();
    prototype SetupInstall();
    prototype SetupScreen();
    prototype CheckRequirements();
    prototype DialogShowSdWelcome();
    prototype DialogShowSdLicense();
    prototype DialogShowSdAskDestPath();
    prototype DialogShowSdStartCopy();
    prototype DialogShowSdFinishReboot();
    prototype SetDialogBitmap( NUMBER );

    // your script function prototypes
	prototype IsAcceptableNTServicePack(); // CMM -- 07/28/99
	prototype IsNEC(); // CMM - 07/30/99

    // ----- global variables ------

    // generated by the Project Wizard
    BOOL        bIsWindowsNT4, bIsWindowsNT351, bIsWindows98, bIsWindows95;
    BOOL        bIsShellExplorer, bInstallAborted, bIs32BitSetup;
    STRING      svDir;
    STRING      svName, svCompany, svSerial;
    STRING      svDefGroup;
    STRING      szAppPath;
    STRING      svSetupType;
    LIST        listStartCopy;


    // your global variables


///////////////////////////////////////////////////////////////////////////////
//
//   MAIN PROGRAM
//
//      The setup begins here by hiding the visible setup
//      window.  This is done to allow all the titles, images, etc. to
//      be established before showing the main window.  The setup is
//      then performed in a series of calls to script defined functions,
//      with error checking at each step.
//
///////////////////////////////////////////////////////////////////////////////
program
    Disable( BACKGROUND );

    CheckRequirements();

    SetupInstall();

    SetupScreen();

    if (ShowDialogs()<0) goto end_install;

    if (ProcessBeforeDataMove()<0) goto end_install;

    if (MoveFileData()<0) goto end_install;

    if (ProcessAfterDataMove()<0) goto end_install;

    if (SetupRegistry()<0) goto end_install;

    if (SetupFolders()<0) goto end_install;


    end_install:

    CleanUpInstall();

    // If an unrecoverable error occurred, clean up
    // the partial installation. Otherwise, exit normally.

    if (bInstallAborted) then
        abort;
    endif;

endprogram

///////////////////////////////////////////////////////////////////////////////
//
// Function:  ShowDialogs
//
//  Purpose:  This function manages the display and navigation of
//            the standard dialogs that exist in a setup.
//
///////////////////////////////////////////////////////////////////////////////
function ShowDialogs()
    NUMBER  nResult;

begin

    Dlg_Start:
    // beginning of dialogs label

    Dlg_SdWelcome:
    SetDialogBitmap(1);
    nResult = DialogShowSdWelcome();
    if (nResult = BACK) goto Dlg_Start;

    Dlg_SdLicense:
    nResult = DialogShowSdLicense();
    if (nResult = BACK) goto Dlg_SdWelcome;

    Dlg_SdAskDestPath:
    SetDialogBitmap(2);
    nResult = DialogShowSdAskDestPath();
    if (nResult = BACK) goto Dlg_SdLicense;

    return 0;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: ProcessBeforeDataMove
//
//  Purpose: This function performs any necessary operations prior to the
//           actual file transfer.
//
///////////////////////////////////////////////////////////////////////////////
function ProcessBeforeDataMove()
    STRING svLogFile;
    NUMBER nResult;
    NUMBER  nvType;
    NUMBER  nvSize;
    STRING  svValue;
    STRING  svUninstCmdLine;

begin

  // Create app information, uninstallation, and App Paths registry keys.

    InstallationInfo( @COMPANY_NAME, @PRODUCT_NAME, @PRODUCT_VERSION, @PRODUCT_KEY );

    svLogFile = UNINST_LOGFILE_NAME;

    nResult = DeinstallStart( svDir, svLogFile, @UNINST_KEY, 0 );
    if (nResult < 0) then
        MessageBox( @ERROR_UNINSTSETUP, WARNING );
    endif;

    szAppPath = TARGETDIR; // TO DO : if your application .exe is in a subfolder
                           // of TARGETDIR then add subfolder

    if ((bIs32BitSetup) && (bIsShellExplorer)) then
        RegDBSetItem( REGDB_APPPATH, szAppPath );
        RegDBSetItem( REGDB_APPPATH_DEFAULT, szAppPath ^ @PRODUCT_KEY );
        RegDBSetItem( REGDB_UNINSTALL_NAME, @UNINST_DISPLAY_NAME );

    	// setup the command for the custom DLL to be used during uninstall;
    	// first get the current uninstall value...
    	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
    	if (0 = RegDBGetKeyValueEx( "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\" ^ @UNINST_DISPLAY_NAME
                                                        , "UninstallString"
                                                        , nvType
                                                        , svValue
                                                        , nvSize)) then
   			
   			svUninstCmdLine = svValue + " -c\"" + TARGETDIR + "\\qsinst.dll\"";
   			RegDBSetKeyValueEx("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\" ^ @UNINST_DISPLAY_NAME
                               , "UninstallString", REGDB_STRING, svUninstCmdLine, -1);
		endif;


    endif;

    // TO DO : any other tasks you want to perform before file transfer
    //
    // If you are installing self-registering files using the
    // batch method, remove the slashes from the line below:
    //
    Enable ( SELFREGISTERBATCH );

	//
	// Stop our service
	//
	QServerInstStopService( "Qserver" );
	

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  Function:  MoveFileData
//
//  Purpose:  This function handles the file transfer for
//            the setup.
//
///////////////////////////////////////////////////////////////////////////////
function MoveFileData()
    NUMBER nResult, nDisk;

begin

    nDisk = 1;
    SetStatusWindow( 0, "" );
    Disable(DIALOGCACHE);
    Disable(FEEDBACK_FULL);
    PlaceWindow(STATUS, CENTERED, 1, LOWER_LEFT);
    Enable( STATUS );
    StatusUpdate( ON, 100 );
    nResult = ComponentMoveData( MEDIA, nDisk, 0 );

    HandleMoveDataError( nResult );

    Disable( STATUS );

    return nResult;

end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: HandleMoveDataError
//
//  Purpose: This function handles the error (if any) during the file transfer
//           operation.
//
///////////////////////////////////////////////////////////////////////////////
function HandleMoveDataError( nResult )
    STRING szErrMsg, svComponent , svFileGroup , svFile;

begin

    svComponent = "";
    svFileGroup = "";
    svFile = "";

    switch (nResult)
        case 0:
            return 0;
        default:
            ComponentError ( MEDIA , svComponent , svFileGroup , svFile , nResult );
            szErrMsg = @ERROR_MOVEDATA  + "\n\n" +
                @ERROR_COMPONENT + " " + svComponent + "\n" +
                @ERROR_FILEGROUP + " " + svFileGroup + "\n" +
                @ERROR_FILE      + " " + svFile;
            SprintfBox( SEVERE, @TITLE_CAPTIONBAR, szErrMsg, nResult );
            bInstallAborted = TRUE;
            return nResult;
    endswitch;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: ProcessAfterDataMove
//
//  Purpose: This function performs any necessary operations needed after
//           all files have been transferred.
//
///////////////////////////////////////////////////////////////////////////////
function ProcessAfterDataMove()
    STRING szReferenceFile, szMsg;

begin

    // TO DO : update self-registered files and other processes that
    //        should be performed after the files have been transferred.
    //
    // If you are installing self-registering files using the
    // batch method, remove the slashes from the lines below:
    //
    Do ( SELFREGISTRATIONPROCESS );

  	// Delete the superfluous key created by the call to InstallationInfo()
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	RegDBDeleteKey("SOFTWARE\\Symantec\\Norton AntiVirus Quarantine Server");

    // DeinstallSetReference specifies a file to be checked before
    // uninstallation. If the file is in use, uninstallation will not proceed.

    //szReferenceFile = svDir ^ @PRODUCT_KEY; // TO DO : If your file is in a
                                            // subfolder of svDir add that here
    //DeinstallSetReference( szReferenceFile );

	QServerInstStartService( "Qserver" );

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupRegistry
//
//  Purpose: This function makes the registry entries for this setup.
//
///////////////////////////////////////////////////////////////////////////////
function SetupRegistry()
    NUMBER nResult;
    NUMBER nvType;
    NUMBER nvSize;
    NUMBER nUsgCnt;
    STRING szKey;
    STRING szValue;
    STRING szValueName;
    STRING svValueData;


begin

    // TO DO : Add all your registry entry keys here.
    // Call registry functions and/or create keys from
    // the InstallShield IDE's Resources pane.


	// [HKEY_LOCAL_MACHINE\SOFTWARE\Symantec\InstalledApps]
    Disable(LOGGING);

    szKey = SYMANTEC_INSTALLED_APPS_KEY;
    RegDBCreateKeyEx(szKey, "");

    // Process the VP6UsageCount Key.
    szValueName = "VP6UsageCount";

    if( 0 = RegDBGetKeyValueEx( szKey, szValueName, nvType, svValueData, nvSize ) ) then
   		StrToNum( nUsgCnt, svValueData );
   		// increment the usage count.
   		nUsgCnt = nUsgCnt + 1;
   		NumToStr( szValue, nUsgCnt );
   		// set the new value.
   		RegDBSetKeyValueEx( szKey, szValueName, REGDB_NUMBER, szValue, -1 );
   	else
   		// The key doesn't exist so create it and give it a usage count of 1.
   		RegDBSetKeyValueEx( szKey, szValueName, REGDB_NUMBER, "1", -1 );
   	endif;
   	
    Enable(LOGGING);
	

    CreateRegistrySet( "Common" );


    return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupFolders
//
//  Purpose: This function creates all the folders and shortcuts for the
//           setup.  This includes program groups and items for Windows 3.1.
//
///////////////////////////////////////////////////////////////////////////////
function SetupFolders()
    NUMBER nResult;

begin


    // TO DO : Add all your folders (or program groups) along with shortcuts (or
    // program items). Call CreateProgramFolder and AddFolderIcon, and/or create
    // shortcuts etc. from the InstallShield IDE's Resources pane.
    //
    // Note : for 16-bit setups you should add an uninstaller icon pointing to
    //        your log file.  Under 32-bit this is automatically done by Windows.

    nResult = CreateShellObjects( "" );

    return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: CleanUpInstall
//
//  Purpose: This cleans up the setup.  Anything that should
//           be released or deleted at the end of the setup should
//           be done here.
//
///////////////////////////////////////////////////////////////////////////////
function CleanUpInstall()

begin

    ListDestroy( listStartCopy );

    if (bInstallAborted) then
        return 0;
    endif;

	SetDialogBitmap(3);
    DialogShowSdFinishReboot();

    if (BATCH_INSTALL) then // ensure locked files are properly transferred
        CommitSharedFiles(0);
    endif;

	UnUseDLL( SUPPORTDIR^"qsinst.dll" );
	
    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupInstall
//
//  Purpose: This will initialize the setup.  Any general initialization
//           needed for the installation should be performed here.
//
///////////////////////////////////////////////////////////////////////////////
function SetupInstall()

begin

    Enable( CORECOMPONENTHANDLING );

    bInstallAborted = FALSE;

    //  Create list of end user selections to be displayed by DialogShowSdStartCopy()  //

    listStartCopy = ListCreate(STRINGLIST);

    ListAddString( listStartCopy, @INSTALLATION_SUMMARY, AFTER );

    svDir = PROGRAMFILES ^ @COMPANY_NAME ^ @NAV_QUARANTINE ^ @NAV_QUARANTINE_SERVER;

    TARGETDIR  = svDir;

    SdProductName( @PRODUCT_NAME );

    Enable( DIALOGCACHE );

	//
	// Load our custom dll.
	//
	UseDLL( SUPPORTDIR^"qsinst.dll" );

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  SetupScreen
//
//  Purpose:  This function establishes  the screen look.  This includes
//            colors, fonts, and text to be displayed.
//
///////////////////////////////////////////////////////////////////////////////

function    SetupScreen()
begin

    Disable ( BACKGROUND );             // Hide the changes we're about to make...

	PlaceBitmap ( ISUSER + ";255,0,255", IDB_WALLPAPER_BITMAP, 0, 0, UPPER_LEFT | BITMAPICON );
	SetColor ( BACKGROUND, RGB ( 255, 222, 1 ) );
	
    Enable(BACKGROUND);                 // Bam!  Here's your cool background

    Delay(1);

end;    // SetupScreen

///////////////////////////////////////////////////////////////////////////////
//
// Function:  CheckRequirements
//
//  Purpose:  This function checks all minimum requirements for the
//            application being installed.  If any fail, then the user
//            is informed and the setup is terminated.
//
///////////////////////////////////////////////////////////////////////////////
function CheckRequirements()
    NUMBER  nvDx, nvDy, nvResult;
    STRING  svResult, szTitle, szMsg;

begin

    bIsShellExplorer = FALSE;
    bIsWindowsNT4    = FALSE;
    bIsWindowsNT351  = FALSE;
    bIsWindows95     = FALSE;
    bIsWindows98     = FALSE;

    // Check screen resolution.
    GetExtents( nvDx, nvDy );

    if (nvDy < 480) then
        MessageBox( @ERROR_VGARESOLUTION, WARNING );
        abort;
    endif;

    // Set 'setup' operation mode
    bIs32BitSetup = TRUE;
    GetSystemInfo( ISTYPE, nvResult, svResult );
    if (nvResult = 16) then
        bIs32BitSetup = FALSE; // running 16-bit setup
        return 0; // no additional information required
    endif;

    // --- 32-bit testing after this point ---

    // Determine the target system's operating system.
    GetSystemInfo( OS, nvResult, svResult );

    if (nvResult = IS_WINDOWSNT) then
        // Check to see if OS is Windows NT 4.0 or Windows NT 3.51,
        // and if the shell being used is the Explorer shell.
        if (GetSystemInfo( WINMAJOR, nvResult, svResult ) = 0) then
            if ( ((nvResult = 4) && IsAcceptableNTServicePack()) || (nvResult > 4) ) then
                bIsShellExplorer = TRUE;
                bIsWindowsNT4 = TRUE;
            else
          	 	szTitle = @TITLE_CAPTIONBAR;
    			szMsg = @ERROR_INVALID_OS;
    			// Not running NT4 SP3, alert user and bail out of the install
    			SprintfBox(SEVERE, szTitle, szMsg);
    			abort;
            endif;
        endif;
    elseif (nvResult = IS_WINDOWS9X) then
        szTitle = @TITLE_CAPTIONBAR;
    	szMsg = @ERROR_INVALID_OS;
    	// Not running NT4, alert user and bail out of the install
    	SprintfBox(SEVERE, szTitle, szMsg);
    	abort;
    endif;

    // Make sure we're not running on an NEC box
    if(IsNEC()) then
    	szTitle = @TITLE_CAPTIONBAR;
    	szMsg = @ERROR_NEC;
    	// Running on NEC, alert user and bail out of the install
    	SprintfBox(SEVERE, szTitle, szMsg);
    	abort;
    endif;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdWelcome
//
//  Purpose: This function handles the standard welcome dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdWelcome()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "";
    szMsg   = "";
    nResult = SdWelcome( szTitle, szMsg );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdLicense
//
//  Purpose: This function displays the license agreement dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdLicense()
    NUMBER nResult;
    STRING szTitle, szMsg, szQuestion, szLicenseFile;

begin

    szLicenseFile = SUPPORTDIR ^ "license.txt";
    szTitle    = "";
    szMsg      = "";
    szQuestion = "";
    nResult    = SdLicense( szTitle, szMsg, szQuestion, szLicenseFile );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdAskDestPath
//
//  Purpose: This function asks the user for the destination folder.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdAskDestPath()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "";
    szMsg   = "";
    nResult = SdAskDestPath( szTitle, szMsg, svDir, 0 );

    TARGETDIR = svDir;

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdStartCopy
//
//  Purpose: This function displays the dialog preceding the start of the
//           file transfer process.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdStartCopy()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "";
    szMsg   = "";
    nResult = SdStartCopy( szTitle, szMsg, listStartCopy );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdFinishReboot
//
//  Purpose: This function will show the last dialog of the product.
//           It will allow the user to reboot and/or show some readme text.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdFinishReboot()
    NUMBER nResult, nDefOptions;
    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2;
    NUMBER bOpt1, bOpt2;

begin

    if (!BATCH_INSTALL) then
        bOpt1 = FALSE;
        bOpt2 = FALSE;
        szMsg1 = @SETUP_COMPLETE;
        szMsg2 = "";
        szOption1 = "";
        szOption2 = "";
        nResult = SdFinish( szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2 );
        return 0;
    endif;

    nDefOptions = SYS_BOOTMACHINE;
    szTitle     = "";
    szMsg1      = "";
    szMsg2      = "";
    nResult     = SdFinishReboot( szTitle, szMsg1, nDefOptions, szMsg2, 0 );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function:  SetDialogBitmap
//
//  Purpose:  Returns the filename of a bitmap whose number is passed in.
//            The filename is picked based on the color depth of the system.
//
///////////////////////////////////////////////////////////////////////////////

function SetDialogBitmap ( nBitmapNumber )

    STRING szFilename;

begin
    NumToStr ( szFilename, nBitmapNumber );

    szFilename = SUPPORTDIR ^ "install" + szFilename + ".bmp";

    DialogSetInfo( DLG_INFO_ALTIMAGE, szFilename, 0);
end;

///////////////////////////////////////////////////////////////////////////////
//
//  Function: IsAcceptableNTServicePack
//
//  Purpose: Returns TRUE if they have a service pack installed that we can accept
//		     returns FALSE otherwise.
//			 Added by Chris McGowen -- 07/28/99
//
///////////////////////////////////////////////////////////////////////////////
function IsAcceptableNTServicePack()
	BOOL bRtnVal;
	STRING svServicePack;
	NUMBER nvType, nvSize;
begin
	bRtnVal = TRUE;
	
	RegDBSetDefaultRoot( HKEY_LOCAL_MACHINE );
	
	if( RegDBGetKeyValueEx( "Software\\Microsoft\\Windows NT\\CurrentVersion", "CSDVersion", nvType,
							svServicePack, nvSize ) = 0 ) then
		// Insure that SP3 or greater is installed
        if (svServicePack = "") ||
           (svServicePack = "Service Pack 1") ||
           (svServicePack = "Service Pack 2") then
           bRtnVal = FALSE;
        endif;
	else
		bRtnVal = FALSE;	
	endif;
	
	return bRtnVal;
end;	

///////////////////////////////////////////////////////////////////////////////
//
//  Function: IsNEC
//
//  Purpose: Returns TRUE if the computer is an NEC computer.
//			 Added 7/30/99 -- CMM
//
///////////////////////////////////////////////////////////////////////////////
function IsNEC()
	STRING szUser32DLL;
	BOOL bRtnVal;
begin
	bRtnVal = FALSE;
	szUser32DLL = WINSYSDIR ^ "USER32.DLL";
	if(UseDLL(szUser32DLL) = 0) then
		if ( User32.GetKeyboardType( 0 ) = 7 ) then
    		if ( User32.GetKeyboardType( 1 ) > 3328 ) then
    			bRtnVal = TRUE;
        	endif;
    	endif;
    	UnUseDLL(szUser32DLL);
    endif;

    return bRtnVal;
end;

// --- include script file section ---

#include "sddialog.rul"
























